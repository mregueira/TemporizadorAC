
TempV8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002018  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080020d8  080020d8  000120d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002128  08002128  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002128  08002128  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002128  08002128  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000028  08002158  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002158  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed5  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001509  00000000  00000000  00027f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00029430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f4e7  00000000  00000000  0002a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009aa6  00000000  00000000  00039a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f18a  00000000  00000000  000434d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a265f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa0  00000000  00000000  000a26b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080020c0 	.word	0x080020c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080020c0 	.word	0x080020c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd8a 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f810 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f882 	bl	8000334 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000230:	f000 f856 	bl	80002e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <main+0x28>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fd0e 	bl	8001c58 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	proc_state_vars();
 800023c:	f000 f9b0 	bl	80005a0 <proc_state_vars>
	main_sys();
 8000240:	f000 fa64 	bl	800070c <main_sys>
	proc_state_vars();
 8000244:	e7fa      	b.n	800023c <main+0x1c>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000060 	.word	0x20000060

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b091      	sub	sp, #68	; 0x44
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	2410      	movs	r4, #16
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2330      	movs	r3, #48	; 0x30
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f001 ff27 	bl	80020b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	003b      	movs	r3, r7
 8000264:	0018      	movs	r0, r3
 8000266:	2310      	movs	r3, #16
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f001 ff20 	bl	80020b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	0021      	movs	r1, r4
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2202      	movs	r2, #2
 8000276:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2201      	movs	r2, #1
 800027c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2210      	movs	r2, #16
 8000282:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2202      	movs	r2, #2
 8000288:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2200      	movs	r2, #0
 800028e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	22c0      	movs	r2, #192	; 0xc0
 8000294:	0352      	lsls	r2, r2, #13
 8000296:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2200      	movs	r2, #0
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 f84b 	bl	800133c <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002aa:	f000 fca1 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	003b      	movs	r3, r7
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2202      	movs	r2, #2
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c6:	003b      	movs	r3, r7
 80002c8:	2101      	movs	r1, #1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fb50 	bl	8001970 <HAL_RCC_ClockConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002d4:	f000 fc8c 	bl	8000bf0 <Error_Handler>
  }
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b011      	add	sp, #68	; 0x44
 80002de:	bd90      	pop	{r4, r7, pc}

080002e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_TIM16_Init+0x44>)
 80002e6:	4a10      	ldr	r2, [pc, #64]	; (8000328 <MX_TIM16_Init+0x48>)
 80002e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200 - 1;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_TIM16_Init+0x44>)
 80002ec:	4a0f      	ldr	r2, [pc, #60]	; (800032c <MX_TIM16_Init+0x4c>)
 80002ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_TIM16_Init+0x44>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000 - 1;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_TIM16_Init+0x44>)
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <MX_TIM16_Init+0x50>)
 80002fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_TIM16_Init+0x44>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_TIM16_Init+0x44>)
 8000304:	2200      	movs	r2, #0
 8000306:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_TIM16_Init+0x44>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <MX_TIM16_Init+0x44>)
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fc51 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800031a:	f000 fc69 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000060 	.word	0x20000060
 8000328:	40014400 	.word	0x40014400
 800032c:	00000c7f 	.word	0x00000c7f
 8000330:	00001387 	.word	0x00001387

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	2314      	movs	r3, #20
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f001 feb4 	bl	80020b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_GPIO_Init+0x90>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_GPIO_Init+0x90>)
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	0289      	lsls	r1, r1, #10
 8000352:	430a      	orrs	r2, r1
 8000354:	615a      	str	r2, [r3, #20]
 8000356:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_GPIO_Init+0x90>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	029b      	lsls	r3, r3, #10
 800035e:	4013      	ands	r3, r2
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|FAN_Pin|EXTGAS_Pin, GPIO_PIN_RESET);
 8000364:	23b8      	movs	r3, #184	; 0xb8
 8000366:	0099      	lsls	r1, r3, #2
 8000368:	2390      	movs	r3, #144	; 0x90
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	2200      	movs	r2, #0
 800036e:	0018      	movs	r0, r3
 8000370:	f000 ffab 	bl	80012ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VALV_Pin LIMITE_Pin G_Pin W_Pin
                           VACIO_Pin */
  GPIO_InitStruct.Pin = VALV_Pin|LIMITE_Pin|G_Pin|W_Pin
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	221f      	movs	r2, #31
 8000378:	601a      	str	r2, [r3, #0]
                          |VACIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	1d3a      	adds	r2, r7, #4
 8000388:	2390      	movs	r3, #144	; 0x90
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fe16 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin FAN_Pin EXTGAS_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|FAN_Pin|EXTGAS_Pin;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	22b8      	movs	r2, #184	; 0xb8
 8000398:	0092      	lsls	r2, r2, #2
 800039a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2201      	movs	r2, #1
 80003a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2203      	movs	r2, #3
 80003ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ae:	1d3a      	adds	r2, r7, #4
 80003b0:	2390      	movs	r3, #144	; 0x90
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	0011      	movs	r1, r2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 fe02 	bl	8000fc0 <HAL_GPIO_Init>

}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b006      	add	sp, #24
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d11f      	bne.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		// Elapsed 0.5s
		if(hab_timer == 1){ // General counter
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d106      	bne.n	80003ee <HAL_TIM_PeriodElapsedCallback+0x26>
			cont++;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80003ea:	801a      	strh	r2, [r3, #0]
 80003ec:	e002      	b.n	80003f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}else{
			cont = 0;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	801a      	strh	r2, [r3, #0]
		}

		if(hab_timer_c == 1){ // General counter
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d106      	bne.n	800040a <HAL_TIM_PeriodElapsedCallback+0x42>
			cont_c++;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	b29a      	uxth	r2, r3
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000406:	801a      	strh	r2, [r3, #0]
 8000408:	e002      	b.n	8000410 <HAL_TIM_PeriodElapsedCallback+0x48>
		}else{
			cont_c = 0;
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800040c:	2200      	movs	r2, #0
 800040e:	801a      	strh	r2, [r3, #0]
		}

		input_chk();
 8000410:	f000 f810 	bl	8000434 <input_chk>
		indicator_update();
 8000414:	f000 f99a 	bl	800074c <indicator_update>
	}
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000060 	.word	0x20000060
 8000424:	2000004a 	.word	0x2000004a
 8000428:	20000046 	.word	0x20000046
 800042c:	2000004c 	.word	0x2000004c
 8000430:	20000048 	.word	0x20000048

08000434 <input_chk>:

void input_chk(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	2200      	movs	r2, #0
 800043e:	801a      	strh	r2, [r3, #0]
	// Read actual input states
	input_state[0] = G;
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2104      	movs	r1, #4
 8000446:	0018      	movs	r0, r3
 8000448:	f000 ff22 	bl	8001290 <HAL_GPIO_ReadPin>
 800044c:	0003      	movs	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b50      	ldr	r3, [pc, #320]	; (8000594 <input_chk+0x160>)
 8000452:	801a      	strh	r2, [r3, #0]
	input_state[1] = W;
 8000454:	2390      	movs	r3, #144	; 0x90
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2108      	movs	r1, #8
 800045a:	0018      	movs	r0, r3
 800045c:	f000 ff18 	bl	8001290 <HAL_GPIO_ReadPin>
 8000460:	0003      	movs	r3, r0
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b4b      	ldr	r3, [pc, #300]	; (8000594 <input_chk+0x160>)
 8000466:	805a      	strh	r2, [r3, #2]
	input_state[2] = LIMITE;
 8000468:	2390      	movs	r3, #144	; 0x90
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2102      	movs	r1, #2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 ff0e 	bl	8001290 <HAL_GPIO_ReadPin>
 8000474:	0003      	movs	r3, r0
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b46      	ldr	r3, [pc, #280]	; (8000594 <input_chk+0x160>)
 800047a:	809a      	strh	r2, [r3, #4]
	input_state[3] = VALV;
 800047c:	2390      	movs	r3, #144	; 0x90
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2101      	movs	r1, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f000 ff04 	bl	8001290 <HAL_GPIO_ReadPin>
 8000488:	0003      	movs	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b41      	ldr	r3, [pc, #260]	; (8000594 <input_chk+0x160>)
 800048e:	80da      	strh	r2, [r3, #6]
	input_state[4] = VACIO;
 8000490:	2390      	movs	r3, #144	; 0x90
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	2110      	movs	r1, #16
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fefa 	bl	8001290 <HAL_GPIO_ReadPin>
 800049c:	0003      	movs	r3, r0
 800049e:	b29a      	uxth	r2, r3
 80004a0:	4b3c      	ldr	r3, [pc, #240]	; (8000594 <input_chk+0x160>)
 80004a2:	811a      	strh	r2, [r3, #8]
	// Process new states
	for(i = 0; i < 6; i++){
 80004a4:	1dbb      	adds	r3, r7, #6
 80004a6:	2200      	movs	r2, #0
 80004a8:	801a      	strh	r2, [r3, #0]
 80004aa:	e069      	b.n	8000580 <input_chk+0x14c>
		if(input_state[i] != state_vars[i]){
 80004ac:	1dbb      	adds	r3, r7, #6
 80004ae:	881a      	ldrh	r2, [r3, #0]
 80004b0:	4b38      	ldr	r3, [pc, #224]	; (8000594 <input_chk+0x160>)
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	5ad2      	ldrh	r2, [r2, r3]
 80004b6:	1dbb      	adds	r3, r7, #6
 80004b8:	8819      	ldrh	r1, [r3, #0]
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <input_chk+0x164>)
 80004bc:	0049      	lsls	r1, r1, #1
 80004be:	5acb      	ldrh	r3, [r1, r3]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d04b      	beq.n	800055c <input_chk+0x128>
			if((input_state[i] == CLOSE)&&(state_vars[i] == OPEN)){
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	881a      	ldrh	r2, [r3, #0]
 80004c8:	4b32      	ldr	r3, [pc, #200]	; (8000594 <input_chk+0x160>)
 80004ca:	0052      	lsls	r2, r2, #1
 80004cc:	5ad3      	ldrh	r3, [r2, r3]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d11e      	bne.n	8000510 <input_chk+0xdc>
 80004d2:	1dbb      	adds	r3, r7, #6
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	4b30      	ldr	r3, [pc, #192]	; (8000598 <input_chk+0x164>)
 80004d8:	0052      	lsls	r2, r2, #1
 80004da:	5ad3      	ldrh	r3, [r2, r3]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d117      	bne.n	8000510 <input_chk+0xdc>
				count_vars[i]++;
 80004e0:	1dbb      	adds	r3, r7, #6
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	4a2d      	ldr	r2, [pc, #180]	; (800059c <input_chk+0x168>)
 80004e6:	0059      	lsls	r1, r3, #1
 80004e8:	5a8a      	ldrh	r2, [r1, r2]
 80004ea:	3201      	adds	r2, #1
 80004ec:	b291      	uxth	r1, r2
 80004ee:	4a2b      	ldr	r2, [pc, #172]	; (800059c <input_chk+0x168>)
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	5299      	strh	r1, [r3, r2]
				if(count_vars[i] == 6){ // 3s
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	881a      	ldrh	r2, [r3, #0]
 80004f8:	4b28      	ldr	r3, [pc, #160]	; (800059c <input_chk+0x168>)
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	5ad3      	ldrh	r3, [r2, r3]
 80004fe:	2b06      	cmp	r3, #6
 8000500:	d139      	bne.n	8000576 <input_chk+0x142>
					state_vars[i] = CLOSE;
 8000502:	1dbb      	adds	r3, r7, #6
 8000504:	881a      	ldrh	r2, [r3, #0]
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <input_chk+0x164>)
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	52d1      	strh	r1, [r2, r3]
				if(count_vars[i] == 6){ // 3s
 800050e:	e032      	b.n	8000576 <input_chk+0x142>
				}
			}
			else if((input_state[i] == OPEN)&&(state_vars[i] == CLOSE)){
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	881a      	ldrh	r2, [r3, #0]
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <input_chk+0x160>)
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	5ad3      	ldrh	r3, [r2, r3]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d12b      	bne.n	8000576 <input_chk+0x142>
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <input_chk+0x164>)
 8000524:	0052      	lsls	r2, r2, #1
 8000526:	5ad3      	ldrh	r3, [r2, r3]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d124      	bne.n	8000576 <input_chk+0x142>
				count_vars[i]++;
 800052c:	1dbb      	adds	r3, r7, #6
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <input_chk+0x168>)
 8000532:	0059      	lsls	r1, r3, #1
 8000534:	5a8a      	ldrh	r2, [r1, r2]
 8000536:	3201      	adds	r2, #1
 8000538:	b291      	uxth	r1, r2
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <input_chk+0x168>)
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	5299      	strh	r1, [r3, r2]
				if(count_vars[i] == 6){ // 3s
 8000540:	1dbb      	adds	r3, r7, #6
 8000542:	881a      	ldrh	r2, [r3, #0]
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <input_chk+0x168>)
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	5ad3      	ldrh	r3, [r2, r3]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d113      	bne.n	8000576 <input_chk+0x142>
					state_vars[i] = OPEN;
 800054e:	1dbb      	adds	r3, r7, #6
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <input_chk+0x164>)
 8000554:	0052      	lsls	r2, r2, #1
 8000556:	2100      	movs	r1, #0
 8000558:	52d1      	strh	r1, [r2, r3]
 800055a:	e00c      	b.n	8000576 <input_chk+0x142>
				}
			}
		}else{
			if(count_vars[i] != 0) count_vars[i] = 0;
 800055c:	1dbb      	adds	r3, r7, #6
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <input_chk+0x168>)
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	5ad3      	ldrh	r3, [r2, r3]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <input_chk+0x142>
 800056a:	1dbb      	adds	r3, r7, #6
 800056c:	881a      	ldrh	r2, [r3, #0]
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <input_chk+0x168>)
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	2100      	movs	r1, #0
 8000574:	52d1      	strh	r1, [r2, r3]
	for(i = 0; i < 6; i++){
 8000576:	1dbb      	adds	r3, r7, #6
 8000578:	881a      	ldrh	r2, [r3, #0]
 800057a:	1dbb      	adds	r3, r7, #6
 800057c:	3201      	adds	r2, #1
 800057e:	801a      	strh	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d800      	bhi.n	800058a <input_chk+0x156>
 8000588:	e790      	b.n	80004ac <input_chk+0x78>
		}
	}

}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000010 	.word	0x20000010
 8000598:	20000004 	.word	0x20000004
 800059c:	20000054 	.word	0x20000054

080005a0 <proc_state_vars>:

void proc_state_vars(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	if(state_vars[LIM_sw] == CLOSE){ // Normal operation
 80005a4:	4b4f      	ldr	r3, [pc, #316]	; (80006e4 <proc_state_vars+0x144>)
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d127      	bne.n	80005fc <proc_state_vars+0x5c>
		if(sys == OFF){
 80005ac:	4b4e      	ldr	r3, [pc, #312]	; (80006e8 <proc_state_vars+0x148>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10e      	bne.n	80005d2 <proc_state_vars+0x32>
			if(state_vars[G_sw] == CLOSE){
 80005b4:	4b4b      	ldr	r3, [pc, #300]	; (80006e4 <proc_state_vars+0x144>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d103      	bne.n	80005c4 <proc_state_vars+0x24>
				sys = COOL;
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <proc_state_vars+0x148>)
 80005be:	2202      	movs	r2, #2
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	e006      	b.n	80005d2 <proc_state_vars+0x32>
			}else if(state_vars[W_sw] == CLOSE){
 80005c4:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <proc_state_vars+0x144>)
 80005c6:	885b      	ldrh	r3, [r3, #2]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d102      	bne.n	80005d2 <proc_state_vars+0x32>
				sys = HEAT;
 80005cc:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <proc_state_vars+0x148>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	801a      	strh	r2, [r3, #0]
			}
		}

		if(fail_state == ERROR){
 80005d2:	4b46      	ldr	r3, [pc, #280]	; (80006ec <proc_state_vars+0x14c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d110      	bne.n	80005fc <proc_state_vars+0x5c>
			fail_state = CLEAR;
 80005da:	4b44      	ldr	r3, [pc, #272]	; (80006ec <proc_state_vars+0x14c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	801a      	strh	r2, [r3, #0]
			if(state_vars[G_sw] == OPEN){
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <proc_state_vars+0x144>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d106      	bne.n	80005f6 <proc_state_vars+0x56>
				FAN_OFF;
 80005e8:	2390      	movs	r3, #144	; 0x90
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe6a 	bl	80012ca <HAL_GPIO_WritePin>
			}
			proc_heat = 1;
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <proc_state_vars+0x150>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	801a      	strh	r2, [r3, #0]
		}
	}
	if(state_vars[LIM_sw] == OPEN){ // Limit OPEN
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <proc_state_vars+0x144>)
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d16b      	bne.n	80006dc <proc_state_vars+0x13c>
		if(fail_state == CLEAR){
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <proc_state_vars+0x14c>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d128      	bne.n	800065e <proc_state_vars+0xbe>
			fail_state = ERROR;
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <proc_state_vars+0x14c>)
 800060e:	2201      	movs	r2, #1
 8000610:	801a      	strh	r2, [r3, #0]
			fail_times++;
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <proc_state_vars+0x154>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <proc_state_vars+0x154>)
 800061c:	801a      	strh	r2, [r3, #0]
			if(fail_times >= FAIL_LIMIT){
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <proc_state_vars+0x154>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d91b      	bls.n	800065e <proc_state_vars+0xbe>
				sys = HEAT;
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <proc_state_vars+0x148>)
 8000628:	2201      	movs	r2, #1
 800062a:	801a      	strh	r2, [r3, #0]
				hab_timer = 0;
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <proc_state_vars+0x158>)
 800062e:	2200      	movs	r2, #0
 8000630:	801a      	strh	r2, [r3, #0]
				cont = 0;
 8000632:	4b32      	ldr	r3, [pc, #200]	; (80006fc <proc_state_vars+0x15c>)
 8000634:	2200      	movs	r2, #0
 8000636:	801a      	strh	r2, [r3, #0]
				proc_heat = 5;
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <proc_state_vars+0x150>)
 800063a:	2205      	movs	r2, #5
 800063c:	801a      	strh	r2, [r3, #0]
				EXTGAS_OFF;
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	0099      	lsls	r1, r3, #2
 8000642:	2390      	movs	r3, #144	; 0x90
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2200      	movs	r2, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fe3e 	bl	80012ca <HAL_GPIO_WritePin>
				FAN_ON;
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2201      	movs	r2, #1
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fe37 	bl	80012ca <HAL_GPIO_WritePin>
				while(1){
 800065c:	e7fe      	b.n	800065c <proc_state_vars+0xbc>
					// Endless block
				}
			}
		}
		if((sys != HEAT)||(proc_heat != 5)){
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <proc_state_vars+0x148>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d103      	bne.n	800066e <proc_state_vars+0xce>
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <proc_state_vars+0x150>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d023      	beq.n	80006b6 <proc_state_vars+0x116>
			sys = HEAT;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <proc_state_vars+0x148>)
 8000670:	2201      	movs	r2, #1
 8000672:	801a      	strh	r2, [r3, #0]
			hab_timer = 0;
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <proc_state_vars+0x158>)
 8000676:	2200      	movs	r2, #0
 8000678:	801a      	strh	r2, [r3, #0]
			cont = 0;
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <proc_state_vars+0x15c>)
 800067c:	2200      	movs	r2, #0
 800067e:	801a      	strh	r2, [r3, #0]
			hab_timer_c = 0;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <proc_state_vars+0x160>)
 8000682:	2200      	movs	r2, #0
 8000684:	801a      	strh	r2, [r3, #0]
			cont_c = 0;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <proc_state_vars+0x164>)
 8000688:	2200      	movs	r2, #0
 800068a:	801a      	strh	r2, [r3, #0]
			proc_cool = 1;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <proc_state_vars+0x168>)
 800068e:	2201      	movs	r2, #1
 8000690:	801a      	strh	r2, [r3, #0]
			proc_heat = 5;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <proc_state_vars+0x150>)
 8000694:	2205      	movs	r2, #5
 8000696:	801a      	strh	r2, [r3, #0]
			EXTGAS_OFF;
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	0099      	lsls	r1, r3, #2
 800069c:	2390      	movs	r3, #144	; 0x90
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2200      	movs	r2, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fe11 	bl	80012ca <HAL_GPIO_WritePin>
			FAN_ON;
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fe0a 	bl	80012ca <HAL_GPIO_WritePin>
		}
		if(EXTGAS_STATUS == ON){
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	009a      	lsls	r2, r3, #2
 80006ba:	2390      	movs	r3, #144	; 0x90
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fde5 	bl	8001290 <HAL_GPIO_ReadPin>
 80006c6:	0003      	movs	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d107      	bne.n	80006dc <proc_state_vars+0x13c>
			EXTGAS_OFF;
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	0099      	lsls	r1, r3, #2
 80006d0:	2390      	movs	r3, #144	; 0x90
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2200      	movs	r2, #0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fdf7 	bl	80012ca <HAL_GPIO_WritePin>
		}
	}
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000004 	.word	0x20000004
 80006e8:	20000044 	.word	0x20000044
 80006ec:	20000050 	.word	0x20000050
 80006f0:	20000000 	.word	0x20000000
 80006f4:	2000004e 	.word	0x2000004e
 80006f8:	2000004a 	.word	0x2000004a
 80006fc:	20000046 	.word	0x20000046
 8000700:	2000004c 	.word	0x2000004c
 8000704:	20000048 	.word	0x20000048
 8000708:	20000002 	.word	0x20000002

0800070c <main_sys>:

void main_sys(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	switch(sys){
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <main_sys+0x3c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d00e      	beq.n	8000736 <main_sys+0x2a>
 8000718:	dc13      	bgt.n	8000742 <main_sys+0x36>
 800071a:	2b02      	cmp	r3, #2
 800071c:	d005      	beq.n	800072a <main_sys+0x1e>
 800071e:	dc10      	bgt.n	8000742 <main_sys+0x36>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00d      	beq.n	8000740 <main_sys+0x34>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d003      	beq.n	8000730 <main_sys+0x24>
		break;
	case HEAT_VENT:
		cool_process();
		heat_process();
	}
}
 8000728:	e00b      	b.n	8000742 <main_sys+0x36>
		cool_process();
 800072a:	f000 f8ab 	bl	8000884 <cool_process>
		break;
 800072e:	e008      	b.n	8000742 <main_sys+0x36>
		heat_process();
 8000730:	f000 f954 	bl	80009dc <heat_process>
		break;
 8000734:	e005      	b.n	8000742 <main_sys+0x36>
		cool_process();
 8000736:	f000 f8a5 	bl	8000884 <cool_process>
		heat_process();
 800073a:	f000 f94f 	bl	80009dc <heat_process>
}
 800073e:	e000      	b.n	8000742 <main_sys+0x36>
		break;
 8000740:	46c0      	nop			; (mov r8, r8)
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000044 	.word	0x20000044

0800074c <indicator_update>:

void indicator_update(void){
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(fail_times >= FAIL_LIMIT){
 8000750:	4b48      	ldr	r3, [pc, #288]	; (8000874 <indicator_update+0x128>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d90e      	bls.n	8000776 <indicator_update+0x2a>
		LED_GREEN_OFF;
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2200      	movs	r2, #0
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fdb2 	bl	80012ca <HAL_GPIO_WritePin>
		LED_RED_ON;
 8000766:	2390      	movs	r3, #144	; 0x90
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2201      	movs	r2, #1
 800076c:	2120      	movs	r1, #32
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fdab 	bl	80012ca <HAL_GPIO_WritePin>
		}else if(state_vars[LIM_sw] == OPEN){
			LED_GREEN_OFF;
			LED_RED_TOGGLE;
		}
	}
}
 8000774:	e07b      	b.n	800086e <indicator_update+0x122>
		if(state_vars[LIM_sw] == CLOSE){
 8000776:	4b40      	ldr	r3, [pc, #256]	; (8000878 <indicator_update+0x12c>)
 8000778:	889b      	ldrh	r3, [r3, #4]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d165      	bne.n	800084a <indicator_update+0xfe>
			if((sys == HEAT)&&(proc_heat == 3)){
 800077e:	4b3f      	ldr	r3, [pc, #252]	; (800087c <indicator_update+0x130>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d111      	bne.n	80007aa <indicator_update+0x5e>
 8000786:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <indicator_update+0x134>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d10d      	bne.n	80007aa <indicator_update+0x5e>
				LED_RED_OFF;
 800078e:	2390      	movs	r3, #144	; 0x90
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fd97 	bl	80012ca <HAL_GPIO_WritePin>
				LED_GREEN_TOGGLE;
 800079c:	2390      	movs	r3, #144	; 0x90
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fdae 	bl	8001304 <HAL_GPIO_TogglePin>
 80007a8:	e061      	b.n	800086e <indicator_update+0x122>
			}else if((sys == HEAT)&&(proc_heat == 1)&&(state_vars[VACIO_sw] == CLOSE)){
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <indicator_update+0x130>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d134      	bne.n	800081c <indicator_update+0xd0>
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <indicator_update+0x134>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d130      	bne.n	800081c <indicator_update+0xd0>
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <indicator_update+0x12c>)
 80007bc:	891b      	ldrh	r3, [r3, #8]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d12c      	bne.n	800081c <indicator_update+0xd0>
				if(LED_GREEN_STATUS == LED_RED_STATUS){
 80007c2:	2390      	movs	r3, #144	; 0x90
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fd61 	bl	8001290 <HAL_GPIO_ReadPin>
 80007ce:	0003      	movs	r3, r0
 80007d0:	001c      	movs	r4, r3
 80007d2:	2390      	movs	r3, #144	; 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2120      	movs	r1, #32
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fd59 	bl	8001290 <HAL_GPIO_ReadPin>
 80007de:	0003      	movs	r3, r0
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d10e      	bne.n	8000802 <indicator_update+0xb6>
					LED_GREEN_OFF;
 80007e4:	2390      	movs	r3, #144	; 0x90
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fd6c 	bl	80012ca <HAL_GPIO_WritePin>
					LED_RED_ON;
 80007f2:	2390      	movs	r3, #144	; 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fd65 	bl	80012ca <HAL_GPIO_WritePin>
				if(LED_GREEN_STATUS == LED_RED_STATUS){
 8000800:	e035      	b.n	800086e <indicator_update+0x122>
					LED_GREEN_TOGGLE;
 8000802:	2390      	movs	r3, #144	; 0x90
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fd7b 	bl	8001304 <HAL_GPIO_TogglePin>
					LED_RED_TOGGLE;
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2120      	movs	r1, #32
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fd75 	bl	8001304 <HAL_GPIO_TogglePin>
				if(LED_GREEN_STATUS == LED_RED_STATUS){
 800081a:	e028      	b.n	800086e <indicator_update+0x122>
				LED_RED_OFF;
 800081c:	2390      	movs	r3, #144	; 0x90
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2200      	movs	r2, #0
 8000822:	2120      	movs	r1, #32
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fd50 	bl	80012ca <HAL_GPIO_WritePin>
				if(LED_GREEN_STATUS == OFF){
 800082a:	2390      	movs	r3, #144	; 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fd2d 	bl	8001290 <HAL_GPIO_ReadPin>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d119      	bne.n	800086e <indicator_update+0x122>
					LED_GREEN_ON;
 800083a:	2390      	movs	r3, #144	; 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fd41 	bl	80012ca <HAL_GPIO_WritePin>
}
 8000848:	e011      	b.n	800086e <indicator_update+0x122>
		}else if(state_vars[LIM_sw] == OPEN){
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <indicator_update+0x12c>)
 800084c:	889b      	ldrh	r3, [r3, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10d      	bne.n	800086e <indicator_update+0x122>
			LED_GREEN_OFF;
 8000852:	2390      	movs	r3, #144	; 0x90
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fd35 	bl	80012ca <HAL_GPIO_WritePin>
			LED_RED_TOGGLE;
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2120      	movs	r1, #32
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fd4c 	bl	8001304 <HAL_GPIO_TogglePin>
}
 800086c:	e7ff      	b.n	800086e <indicator_update+0x122>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bdb0      	pop	{r4, r5, r7, pc}
 8000874:	2000004e 	.word	0x2000004e
 8000878:	20000004 	.word	0x20000004
 800087c:	20000044 	.word	0x20000044
 8000880:	20000000 	.word	0x20000000

08000884 <cool_process>:

void cool_process(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	switch(proc_cool){
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <cool_process+0x138>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d02d      	beq.n	80008ec <cool_process+0x68>
 8000890:	dc2f      	bgt.n	80008f2 <cool_process+0x6e>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d002      	beq.n	800089c <cool_process+0x18>
 8000896:	2b02      	cmp	r3, #2
 8000898:	d00a      	beq.n	80008b0 <cool_process+0x2c>
 800089a:	e02a      	b.n	80008f2 <cool_process+0x6e>
	case 1:
		hab_timer_c = 1;
 800089c:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <cool_process+0x13c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	801a      	strh	r2, [r3, #0]
		cont_c = 0;
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <cool_process+0x140>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
		proc_cool = 2;
 80008a8:	4b44      	ldr	r3, [pc, #272]	; (80009bc <cool_process+0x138>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	801a      	strh	r2, [r3, #0]
		break;
 80008ae:	e020      	b.n	80008f2 <cool_process+0x6e>
	case 2:
		if((cont_c == 20)||(FAN_STATUS == ON)){ // 10s
 80008b0:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <cool_process+0x140>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	2b14      	cmp	r3, #20
 80008b6:	d008      	beq.n	80008ca <cool_process+0x46>
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fce6 	bl	8001290 <HAL_GPIO_ReadPin>
 80008c4:	0003      	movs	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d112      	bne.n	80008f0 <cool_process+0x6c>
			FAN_ON;
 80008ca:	2390      	movs	r3, #144	; 0x90
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	2201      	movs	r2, #1
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fcf9 	bl	80012ca <HAL_GPIO_WritePin>
			hab_timer_c = 0;
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <cool_process+0x13c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	801a      	strh	r2, [r3, #0]
			cont_c = 0;
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <cool_process+0x140>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	801a      	strh	r2, [r3, #0]
			proc_cool = 3;
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <cool_process+0x138>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	801a      	strh	r2, [r3, #0]
		}
		break;
 80008ea:	e001      	b.n	80008f0 <cool_process+0x6c>
	case 3:
		// COOL ON
		break;
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	e000      	b.n	80008f2 <cool_process+0x6e>
		break;
 80008f0:	46c0      	nop			; (mov r8, r8)
	}
	if(sys != OFF){
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <cool_process+0x144>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d05d      	beq.n	80009b6 <cool_process+0x132>
		if(sys == COOL){
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <cool_process+0x144>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d11f      	bne.n	8000942 <cool_process+0xbe>
			if(state_vars[G_sw] == OPEN){
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <cool_process+0x148>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d113      	bne.n	8000932 <cool_process+0xae>
				hab_timer_c = 0;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <cool_process+0x13c>)
 800090c:	2200      	movs	r2, #0
 800090e:	801a      	strh	r2, [r3, #0]
				cont_c = 0;
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <cool_process+0x140>)
 8000912:	2200      	movs	r2, #0
 8000914:	801a      	strh	r2, [r3, #0]
				proc_cool = 1;
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <cool_process+0x138>)
 8000918:	2201      	movs	r2, #1
 800091a:	801a      	strh	r2, [r3, #0]
				FAN_OFF;
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2200      	movs	r2, #0
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fcd0 	bl	80012ca <HAL_GPIO_WritePin>
				sys = OFF;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <cool_process+0x144>)
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
					sys = COOL;
				}
			}
		}
	}
}
 8000930:	e041      	b.n	80009b6 <cool_process+0x132>
			}else if(state_vars[W_sw] == CLOSE){
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <cool_process+0x148>)
 8000934:	885b      	ldrh	r3, [r3, #2]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d13d      	bne.n	80009b6 <cool_process+0x132>
				sys = HEAT_VENT;
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <cool_process+0x144>)
 800093c:	2203      	movs	r2, #3
 800093e:	801a      	strh	r2, [r3, #0]
}
 8000940:	e039      	b.n	80009b6 <cool_process+0x132>
		}else if(sys == HEAT_VENT){
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <cool_process+0x144>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d135      	bne.n	80009b6 <cool_process+0x132>
			if(state_vars[G_sw] == OPEN){
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <cool_process+0x148>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d117      	bne.n	8000982 <cool_process+0xfe>
				hab_timer_c = 0;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <cool_process+0x13c>)
 8000954:	2200      	movs	r2, #0
 8000956:	801a      	strh	r2, [r3, #0]
				cont_c = 0;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <cool_process+0x140>)
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
				proc_cool = 1;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <cool_process+0x138>)
 8000960:	2201      	movs	r2, #1
 8000962:	801a      	strh	r2, [r3, #0]
				sys = HEAT;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <cool_process+0x144>)
 8000966:	2201      	movs	r2, #1
 8000968:	801a      	strh	r2, [r3, #0]
				if(proc_heat < 5){
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <cool_process+0x14c>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d821      	bhi.n	80009b6 <cool_process+0x132>
					FAN_OFF;
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2200      	movs	r2, #0
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fca5 	bl	80012ca <HAL_GPIO_WritePin>
}
 8000980:	e019      	b.n	80009b6 <cool_process+0x132>
			}else if(state_vars[W_sw] == OPEN){
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <cool_process+0x148>)
 8000984:	885b      	ldrh	r3, [r3, #2]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d115      	bne.n	80009b6 <cool_process+0x132>
				if(EXTGAS_STATUS == OFF){
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	009a      	lsls	r2, r3, #2
 800098e:	2390      	movs	r3, #144	; 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fc7b 	bl	8001290 <HAL_GPIO_ReadPin>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d10b      	bne.n	80009b6 <cool_process+0x132>
					hab_timer = 0;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <cool_process+0x150>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	801a      	strh	r2, [r3, #0]
					cont = 0;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <cool_process+0x154>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	801a      	strh	r2, [r3, #0]
					proc_heat = 1;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <cool_process+0x14c>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	801a      	strh	r2, [r3, #0]
					sys = COOL;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <cool_process+0x144>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	801a      	strh	r2, [r3, #0]
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000002 	.word	0x20000002
 80009c0:	2000004c 	.word	0x2000004c
 80009c4:	20000048 	.word	0x20000048
 80009c8:	20000044 	.word	0x20000044
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20000000 	.word	0x20000000
 80009d4:	2000004a 	.word	0x2000004a
 80009d8:	20000046 	.word	0x20000046

080009dc <heat_process>:

void heat_process(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	switch(proc_heat){
 80009e0:	4b7d      	ldr	r3, [pc, #500]	; (8000bd8 <heat_process+0x1fc>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	2b07      	cmp	r3, #7
 80009e6:	d900      	bls.n	80009ea <heat_process+0xe>
 80009e8:	e0ae      	b.n	8000b48 <heat_process+0x16c>
 80009ea:	009a      	lsls	r2, r3, #2
 80009ec:	4b7b      	ldr	r3, [pc, #492]	; (8000bdc <heat_process+0x200>)
 80009ee:	18d3      	adds	r3, r2, r3
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	469f      	mov	pc, r3
	case 1:
		if(state_vars[VACIO_sw] == OPEN){ // Checkeo sensor de vacio
 80009f4:	4b7a      	ldr	r3, [pc, #488]	; (8000be0 <heat_process+0x204>)
 80009f6:	891b      	ldrh	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d000      	beq.n	80009fe <heat_process+0x22>
 80009fc:	e099      	b.n	8000b32 <heat_process+0x156>
			hab_timer = 1;
 80009fe:	4b79      	ldr	r3, [pc, #484]	; (8000be4 <heat_process+0x208>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a04:	4b78      	ldr	r3, [pc, #480]	; (8000be8 <heat_process+0x20c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	801a      	strh	r2, [r3, #0]
			proc_heat = 2;
 8000a0a:	4b73      	ldr	r3, [pc, #460]	; (8000bd8 <heat_process+0x1fc>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000a10:	e08f      	b.n	8000b32 <heat_process+0x156>
	case 2:
		if(state_vars[VACIO_sw] == CLOSE){ // Checkeo sensor de vacio
 8000a12:	4b73      	ldr	r3, [pc, #460]	; (8000be0 <heat_process+0x204>)
 8000a14:	891b      	ldrh	r3, [r3, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d108      	bne.n	8000a2c <heat_process+0x50>
			hab_timer = 0;
 8000a1a:	4b72      	ldr	r3, [pc, #456]	; (8000be4 <heat_process+0x208>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a20:	4b71      	ldr	r3, [pc, #452]	; (8000be8 <heat_process+0x20c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
			proc_heat = 1;
 8000a26:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <heat_process+0x1fc>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	801a      	strh	r2, [r3, #0]
		}
		if(cont == 20){ // 10 segundos
 8000a2c:	4b6e      	ldr	r3, [pc, #440]	; (8000be8 <heat_process+0x20c>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	2b14      	cmp	r3, #20
 8000a32:	d000      	beq.n	8000a36 <heat_process+0x5a>
 8000a34:	e07f      	b.n	8000b36 <heat_process+0x15a>
			EXTGAS_ON;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	0099      	lsls	r1, r3, #2
 8000a3a:	2390      	movs	r3, #144	; 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	2201      	movs	r2, #1
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fc42 	bl	80012ca <HAL_GPIO_WritePin>
			hab_timer = 0;
 8000a46:	4b67      	ldr	r3, [pc, #412]	; (8000be4 <heat_process+0x208>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a4c:	4b66      	ldr	r3, [pc, #408]	; (8000be8 <heat_process+0x20c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
			proc_heat = 3;
 8000a52:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <heat_process+0x1fc>)
 8000a54:	2203      	movs	r2, #3
 8000a56:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000a58:	e06d      	b.n	8000b36 <heat_process+0x15a>
	case 3:
		if(state_vars[VALV_sw] == CLOSE){ // Espera valvula
 8000a5a:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <heat_process+0x204>)
 8000a5c:	88db      	ldrh	r3, [r3, #6]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d000      	beq.n	8000a64 <heat_process+0x88>
 8000a62:	e06a      	b.n	8000b3a <heat_process+0x15e>
			proc_heat = 4;
 8000a64:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <heat_process+0x1fc>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	801a      	strh	r2, [r3, #0]
			hab_timer = 1;
 8000a6a:	4b5e      	ldr	r3, [pc, #376]	; (8000be4 <heat_process+0x208>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a70:	4b5d      	ldr	r3, [pc, #372]	; (8000be8 <heat_process+0x20c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000a76:	e060      	b.n	8000b3a <heat_process+0x15e>
	case 4:
		if((cont == 40)||(FAN_STATUS == ON)){ // 20 segundos
 8000a78:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <heat_process+0x20c>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b28      	cmp	r3, #40	; 0x28
 8000a7e:	d008      	beq.n	8000a92 <heat_process+0xb6>
 8000a80:	2390      	movs	r3, #144	; 0x90
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 fc02 	bl	8001290 <HAL_GPIO_ReadPin>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d155      	bne.n	8000b3e <heat_process+0x162>
			FAN_ON;
 8000a92:	2390      	movs	r3, #144	; 0x90
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2201      	movs	r2, #1
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fc15 	bl	80012ca <HAL_GPIO_WritePin>
			hab_timer = 0;
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <heat_process+0x208>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000aa6:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <heat_process+0x20c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	801a      	strh	r2, [r3, #0]
			proc_heat = 5;
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <heat_process+0x1fc>)
 8000aae:	2205      	movs	r2, #5
 8000ab0:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000ab2:	e044      	b.n	8000b3e <heat_process+0x162>
	case 5:
		// Funcionamiento
		break;
	case 6:
		if((cont == 40)||(EXTGAS_STATUS == OFF)){ // 20 segundos
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <heat_process+0x20c>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b28      	cmp	r3, #40	; 0x28
 8000aba:	d009      	beq.n	8000ad0 <heat_process+0xf4>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	009a      	lsls	r2, r3, #2
 8000ac0:	2390      	movs	r3, #144	; 0x90
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fbe2 	bl	8001290 <HAL_GPIO_ReadPin>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d138      	bne.n	8000b42 <heat_process+0x166>
			EXTGAS_OFF;
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	0099      	lsls	r1, r3, #2
 8000ad4:	2390      	movs	r3, #144	; 0x90
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fbf5 	bl	80012ca <HAL_GPIO_WritePin>
			cont = 0;
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <heat_process+0x20c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
			proc_heat = 7;
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <heat_process+0x1fc>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000aec:	e029      	b.n	8000b42 <heat_process+0x166>
	case 7:
		if((cont == 310)||(FAN_STATUS == OFF)){ // 2 min 35 seg
 8000aee:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <heat_process+0x20c>)
 8000af0:	881a      	ldrh	r2, [r3, #0]
 8000af2:	239b      	movs	r3, #155	; 0x9b
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d007      	beq.n	8000b0a <heat_process+0x12e>
 8000afa:	2390      	movs	r3, #144	; 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fbc5 	bl	8001290 <HAL_GPIO_ReadPin>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d11d      	bne.n	8000b46 <heat_process+0x16a>
			FAN_OFF;
 8000b0a:	2390      	movs	r3, #144	; 0x90
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fbd9 	bl	80012ca <HAL_GPIO_WritePin>
			hab_timer = 0;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <heat_process+0x208>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000b1e:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <heat_process+0x20c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	801a      	strh	r2, [r3, #0]
			sys = OFF;
 8000b24:	4b31      	ldr	r3, [pc, #196]	; (8000bec <heat_process+0x210>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	801a      	strh	r2, [r3, #0]
			proc_heat = 1;
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <heat_process+0x1fc>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000b30:	e009      	b.n	8000b46 <heat_process+0x16a>
		break;
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	e008      	b.n	8000b48 <heat_process+0x16c>
		break;
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	e006      	b.n	8000b48 <heat_process+0x16c>
		break;
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	e004      	b.n	8000b48 <heat_process+0x16c>
		break;
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	e002      	b.n	8000b48 <heat_process+0x16c>
		break;
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	e000      	b.n	8000b48 <heat_process+0x16c>
		break;
 8000b46:	46c0      	nop			; (mov r8, r8)
	}

	if(sys != OFF){
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <heat_process+0x210>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d03f      	beq.n	8000bd0 <heat_process+0x1f4>
		if((state_vars[W_sw] == OPEN)&&(proc_heat <= 5)&&(state_vars[LIM_sw] == CLOSE)){ // Corta señal
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <heat_process+0x204>)
 8000b52:	885b      	ldrh	r3, [r3, #2]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d110      	bne.n	8000b7a <heat_process+0x19e>
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <heat_process+0x1fc>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2b05      	cmp	r3, #5
 8000b5e:	d80c      	bhi.n	8000b7a <heat_process+0x19e>
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <heat_process+0x204>)
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d108      	bne.n	8000b7a <heat_process+0x19e>
			proc_heat = 6;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <heat_process+0x1fc>)
 8000b6a:	2206      	movs	r2, #6
 8000b6c:	801a      	strh	r2, [r3, #0]
			hab_timer = 1;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <heat_process+0x208>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <heat_process+0x20c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
		}
		if((state_vars[W_sw] == CLOSE)&&(proc_heat > 5)){ // Vuelve señal antes de terminar anterior
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <heat_process+0x204>)
 8000b7c:	885b      	ldrh	r3, [r3, #2]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d11b      	bne.n	8000bba <heat_process+0x1de>
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <heat_process+0x1fc>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	d917      	bls.n	8000bba <heat_process+0x1de>
			hab_timer = 0;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <heat_process+0x208>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <heat_process+0x20c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	801a      	strh	r2, [r3, #0]
			if(EXTGAS_STATUS == ON){
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	2390      	movs	r3, #144	; 0x90
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fb75 	bl	8001290 <HAL_GPIO_ReadPin>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d103      	bne.n	8000bb4 <heat_process+0x1d8>
				proc_heat = 5;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <heat_process+0x1fc>)
 8000bae:	2205      	movs	r2, #5
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e002      	b.n	8000bba <heat_process+0x1de>
			}else{
				proc_heat = 1;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <heat_process+0x1fc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	801a      	strh	r2, [r3, #0]
			}
		}
		if((state_vars[G_sw] == CLOSE)&&(state_vars[LIM_sw] == CLOSE)){
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <heat_process+0x204>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d106      	bne.n	8000bd0 <heat_process+0x1f4>
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <heat_process+0x204>)
 8000bc4:	889b      	ldrh	r3, [r3, #4]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <heat_process+0x1f4>
			sys = HEAT_VENT;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <heat_process+0x210>)
 8000bcc:	2203      	movs	r2, #3
 8000bce:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	080020d8 	.word	0x080020d8
 8000be0:	20000004 	.word	0x20000004
 8000be4:	2000004a 	.word	0x2000004a
 8000be8:	20000046 	.word	0x20000046
 8000bec:	20000044 	.word	0x20000044

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	619a      	str	r2, [r3, #24]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	69da      	ldr	r2, [r3, #28]
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0549      	lsls	r1, r1, #21
 8000c24:	430a      	orrs	r2, r1
 8000c26:	61da      	str	r2, [r3, #28]
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_MspInit+0x44>)
 8000c2a:	69da      	ldr	r2, [r3, #28]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	055b      	lsls	r3, r3, #21
 8000c30:	4013      	ands	r3, r2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_TIM_Base_MspInit+0x48>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d115      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0289      	lsls	r1, r1, #10
 8000c60:	430a      	orrs	r2, r1
 8000c62:	619a      	str	r2, [r3, #24]
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2015      	movs	r0, #21
 8000c78:	f000 f970 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c7c:	2015      	movs	r0, #21
 8000c7e:	f000 f982 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40014400 	.word	0x40014400
 8000c90:	40021000 	.word	0x40021000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f888 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <TIM16_IRQHandler+0x14>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 f810 	bl	8001cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000060 	.word	0x20000060

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cec:	f7ff fff6 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d16:	f001 f9a7 	bl	8002068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1a:	f7ff fa81 	bl	8000220 <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   r0, =_estack
 8000d20:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d2c:	08002130 	.word	0x08002130
  ldr r2, =_sbss
 8000d30:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d34:	200000ac 	.word	0x200000ac

08000d38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_IRQHandler>
	...

08000d3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <HAL_Init+0x24>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_Init+0x24>)
 8000d46:	2110      	movs	r1, #16
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f809 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d52:	f7ff ff53 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000d6e:	681c      	ldr	r4, [r3, #0]
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0098      	lsls	r0, r3, #2
 8000d7a:	f7ff f9c5 	bl	8000108 <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff f9c0 	bl	8000108 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f90b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e00f      	b.n	8000db8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80b      	bhi.n	8000db6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8d8 	bl	8000f5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_InitTick+0x64>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	2000001c 	.word	0x2000001c
 8000dc4:	20000024 	.word	0x20000024
 8000dc8:	20000020 	.word	0x20000020

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000024 	.word	0x20000024
 8000dec:	200000a8 	.word	0x200000a8

08000df0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	200000a8 	.word	0x200000a8

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b7f      	cmp	r3, #127	; 0x7f
 8000e16:	d809      	bhi.n	8000e2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	231f      	movs	r3, #31
 8000e20:	401a      	ands	r2, r3
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_EnableIRQ+0x30>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	4091      	lsls	r1, r2
 8000e28:	000a      	movs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
  }
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e4c:	d828      	bhi.n	8000ea0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <__NVIC_SetPriority+0xd4>)
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	33c0      	adds	r3, #192	; 0xc0
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	589b      	ldr	r3, [r3, r2]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <__NVIC_SetPriority+0xd4>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	33c0      	adds	r3, #192	; 0xc0
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e9e:	e031      	b.n	8000f04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <__NVIC_SetPriority+0xd8>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	400b      	ands	r3, r1
 8000eac:	3b08      	subs	r3, #8
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	18d3      	adds	r3, r2, r3
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1dfa      	adds	r2, r7, #7
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	21ff      	movs	r1, #255	; 0xff
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	43d2      	mvns	r2, r2
 8000ece:	401a      	ands	r2, r3
 8000ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	019b      	lsls	r3, r3, #6
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	401a      	ands	r2, r3
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	4003      	ands	r3, r0
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <__NVIC_SetPriority+0xd8>)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	001c      	movs	r4, r3
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	4023      	ands	r3, r4
 8000ef4:	3b08      	subs	r3, #8
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	3306      	adds	r3, #6
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	18c3      	adds	r3, r0, r3
 8000f00:	3304      	adds	r3, #4
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b003      	add	sp, #12
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	045b      	lsls	r3, r3, #17
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d301      	bcc.n	8000f2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e010      	b.n	8000f4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <SysTick_Config+0x44>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f34:	2301      	movs	r3, #1
 8000f36:	425b      	negs	r3, r3
 8000f38:	2103      	movs	r1, #3
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff ff7c 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x44>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x44>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	210f      	movs	r1, #15
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	1c02      	adds	r2, r0, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff ff33 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff ffaf 	bl	8000f14 <SysTick_Config>
 8000fb6:	0003      	movs	r3, r0
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e149      	b.n	8001264 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e13a      	b.n	800125e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e094      	b.n	800125e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b51      	ldr	r3, [pc, #324]	; (800127c <HAL_GPIO_Init+0x2bc>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <HAL_GPIO_Init+0x2bc>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_GPIO_Init+0x2bc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x2c0>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x1d6>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a41      	ldr	r2, [pc, #260]	; (8001284 <HAL_GPIO_Init+0x2c4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x1d2>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a40      	ldr	r2, [pc, #256]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x1ce>
 800118a:	2302      	movs	r3, #2
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x1d8>
 800118e:	2305      	movs	r3, #5
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x1d8>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x1d8>
 8001196:	2300      	movs	r3, #0
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	2103      	movs	r1, #3
 800119c:	400a      	ands	r2, r1
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x2c0>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	035b      	lsls	r3, r3, #13
 80011ce:	4013      	ands	r3, r2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	039b      	lsls	r3, r3, #14
 80011f8:	4013      	ands	r3, r2
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_GPIO_Init+0x2cc>)
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_GPIO_Init+0x2cc>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_GPIO_Init+0x2cc>)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_GPIO_Init+0x2cc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	4013      	ands	r3, r2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_GPIO_Init+0x2cc>)
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	40da      	lsrs	r2, r3
 800126c:	1e13      	subs	r3, r2, #0
 800126e:	d000      	beq.n	8001272 <HAL_GPIO_Init+0x2b2>
 8001270:	e6ae      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  } 
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b006      	add	sp, #24
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	000a      	movs	r2, r1
 800129a:	1cbb      	adds	r3, r7, #2
 800129c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	1cba      	adds	r2, r7, #2
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	4013      	ands	r3, r2
 80012a8:	d004      	beq.n	80012b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012aa:	230f      	movs	r3, #15
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e003      	b.n	80012bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b4:	230f      	movs	r3, #15
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	781b      	ldrb	r3, [r3, #0]
  }
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	0008      	movs	r0, r1
 80012d4:	0011      	movs	r1, r2
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	1c02      	adds	r2, r0, #0
 80012da:	801a      	strh	r2, [r3, #0]
 80012dc:	1c7b      	adds	r3, r7, #1
 80012de:	1c0a      	adds	r2, r1, #0
 80012e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e2:	1c7b      	adds	r3, r7, #1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f2:	e003      	b.n	80012fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f4:	1cbb      	adds	r3, r7, #2
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	000a      	movs	r2, r1
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001318:	1cbb      	adds	r3, r7, #2
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4013      	ands	r3, r2
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	1cb9      	adds	r1, r7, #2
 8001328:	8809      	ldrh	r1, [r1, #0]
 800132a:	400b      	ands	r3, r1
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e301      	b.n	8001952 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	4013      	ands	r3, r2
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x1e>
 8001358:	e08d      	b.n	8001476 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800135a:	4bc3      	ldr	r3, [pc, #780]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	220c      	movs	r2, #12
 8001360:	4013      	ands	r3, r2
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00e      	beq.n	8001384 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001366:	4bc0      	ldr	r3, [pc, #768]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	220c      	movs	r2, #12
 800136c:	4013      	ands	r3, r2
 800136e:	2b08      	cmp	r3, #8
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x64>
 8001372:	4bbd      	ldr	r3, [pc, #756]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	025b      	lsls	r3, r3, #9
 800137a:	401a      	ands	r2, r3
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	429a      	cmp	r2, r3
 8001382:	d10d      	bne.n	80013a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	4bb8      	ldr	r3, [pc, #736]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	029b      	lsls	r3, r3, #10
 800138c:	4013      	ands	r3, r2
 800138e:	d100      	bne.n	8001392 <HAL_RCC_OscConfig+0x56>
 8001390:	e070      	b.n	8001474 <HAL_RCC_OscConfig+0x138>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d000      	beq.n	800139c <HAL_RCC_OscConfig+0x60>
 800139a:	e06b      	b.n	8001474 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e2d8      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d107      	bne.n	80013b8 <HAL_RCC_OscConfig+0x7c>
 80013a8:	4baf      	ldr	r3, [pc, #700]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4bae      	ldr	r3, [pc, #696]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	0249      	lsls	r1, r1, #9
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e02f      	b.n	8001418 <HAL_RCC_OscConfig+0xdc>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x9e>
 80013c0:	4ba9      	ldr	r3, [pc, #676]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4ba8      	ldr	r3, [pc, #672]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	49a9      	ldr	r1, [pc, #676]	; (800166c <HAL_RCC_OscConfig+0x330>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4ba6      	ldr	r3, [pc, #664]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4ba5      	ldr	r3, [pc, #660]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	49a7      	ldr	r1, [pc, #668]	; (8001670 <HAL_RCC_OscConfig+0x334>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e01e      	b.n	8001418 <HAL_RCC_OscConfig+0xdc>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10e      	bne.n	8001400 <HAL_RCC_OscConfig+0xc4>
 80013e2:	4ba1      	ldr	r3, [pc, #644]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	02c9      	lsls	r1, r1, #11
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b9c      	ldr	r3, [pc, #624]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0249      	lsls	r1, r1, #9
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xdc>
 8001400:	4b99      	ldr	r3, [pc, #612]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b98      	ldr	r3, [pc, #608]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001406:	4999      	ldr	r1, [pc, #612]	; (800166c <HAL_RCC_OscConfig+0x330>)
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	4b96      	ldr	r3, [pc, #600]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b95      	ldr	r3, [pc, #596]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001412:	4997      	ldr	r1, [pc, #604]	; (8001670 <HAL_RCC_OscConfig+0x334>)
 8001414:	400a      	ands	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d014      	beq.n	800144a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fce6 	bl	8000df0 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142a:	f7ff fce1 	bl	8000df0 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e28a      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	4b8a      	ldr	r3, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	4013      	ands	r3, r2
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0xee>
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fcd1 	bl	8000df0 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fccc 	bl	8000df0 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e275      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	029b      	lsls	r3, r3, #10
 800146e:	4013      	ands	r3, r2
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x118>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2202      	movs	r2, #2
 800147c:	4013      	ands	r3, r2
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x146>
 8001480:	e069      	b.n	8001556 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	220c      	movs	r2, #12
 8001488:	4013      	ands	r3, r2
 800148a:	d00b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	220c      	movs	r2, #12
 8001492:	4013      	ands	r3, r2
 8001494:	2b08      	cmp	r3, #8
 8001496:	d11c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x196>
 8001498:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	025b      	lsls	r3, r3, #9
 80014a0:	4013      	ands	r3, r2
 80014a2:	d116      	bne.n	80014d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a4:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e24b      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	22f8      	movs	r2, #248	; 0xf8
 80014c0:	4393      	bics	r3, r2
 80014c2:	0019      	movs	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	00da      	lsls	r2, r3, #3
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d0:	e041      	b.n	8001556 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d024      	beq.n	8001524 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b62      	ldr	r3, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc83 	bl	8000df0 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc7e 	bl	8000df0 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e227      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f1      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4393      	bics	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00da      	lsls	r2, r3, #3
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fc5e 	bl	8000df0 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fc59 	bl	8000df0 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e202      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d1f1      	bne.n	800153a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2208      	movs	r2, #8
 800155c:	4013      	ands	r3, r2
 800155e:	d036      	beq.n	80015ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d019      	beq.n	800159c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001568:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800156a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800156e:	2101      	movs	r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fc3c 	bl	8000df0 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fc37 	bl	8000df0 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1e0      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d0f1      	beq.n	800157e <HAL_RCC_OscConfig+0x242>
 800159a:	e018      	b.n	80015ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	438a      	bics	r2, r1
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc22 	bl	8000df0 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc1d 	bl	8000df0 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1c6      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d1f1      	bne.n	80015b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2204      	movs	r2, #4
 80015d4:	4013      	ands	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x29e>
 80015d8:	e0b4      	b.n	8001744 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	201f      	movs	r0, #31
 80015dc:	183b      	adds	r3, r7, r0
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	055b      	lsls	r3, r3, #21
 80015ea:	4013      	ands	r3, r2
 80015ec:	d110      	bne.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0549      	lsls	r1, r1, #21
 80015f8:	430a      	orrs	r2, r1
 80015fa:	61da      	str	r2, [r3, #28]
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	69da      	ldr	r2, [r3, #28]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	055b      	lsls	r3, r3, #21
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800160a:	183b      	adds	r3, r7, r0
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_RCC_OscConfig+0x338>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d11a      	bne.n	8001652 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_RCC_OscConfig+0x338>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_RCC_OscConfig+0x338>)
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	0049      	lsls	r1, r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fbe1 	bl	8000df0 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff fbdc 	bl	8000df0 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e185      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x338>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4013      	ands	r3, r2
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10e      	bne.n	8001678 <HAL_RCC_OscConfig+0x33c>
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 800165c:	6a1a      	ldr	r2, [r3, #32]
 800165e:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001660:	2101      	movs	r1, #1
 8001662:	430a      	orrs	r2, r1
 8001664:	621a      	str	r2, [r3, #32]
 8001666:	e035      	b.n	80016d4 <HAL_RCC_OscConfig+0x398>
 8001668:	40021000 	.word	0x40021000
 800166c:	fffeffff 	.word	0xfffeffff
 8001670:	fffbffff 	.word	0xfffbffff
 8001674:	40007000 	.word	0x40007000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x35e>
 8001680:	4bb6      	ldr	r3, [pc, #728]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	4bb5      	ldr	r3, [pc, #724]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	621a      	str	r2, [r3, #32]
 800168c:	4bb3      	ldr	r3, [pc, #716]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800168e:	6a1a      	ldr	r2, [r3, #32]
 8001690:	4bb2      	ldr	r3, [pc, #712]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001692:	2104      	movs	r1, #4
 8001694:	438a      	bics	r2, r1
 8001696:	621a      	str	r2, [r3, #32]
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x398>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x380>
 80016a2:	4bae      	ldr	r3, [pc, #696]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	4bad      	ldr	r3, [pc, #692]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016a8:	2104      	movs	r1, #4
 80016aa:	430a      	orrs	r2, r1
 80016ac:	621a      	str	r2, [r3, #32]
 80016ae:	4bab      	ldr	r3, [pc, #684]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	4baa      	ldr	r3, [pc, #680]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x398>
 80016bc:	4ba7      	ldr	r3, [pc, #668]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4ba6      	ldr	r3, [pc, #664]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	438a      	bics	r2, r1
 80016c6:	621a      	str	r2, [r3, #32]
 80016c8:	4ba4      	ldr	r3, [pc, #656]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	4ba3      	ldr	r3, [pc, #652]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016ce:	2104      	movs	r1, #4
 80016d0:	438a      	bics	r2, r1
 80016d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d014      	beq.n	8001706 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb88 	bl	8000df0 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	e009      	b.n	80016fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fb83 	bl	8000df0 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	4a9b      	ldr	r2, [pc, #620]	; (8001960 <HAL_RCC_OscConfig+0x624>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e12b      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	4b98      	ldr	r3, [pc, #608]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3aa>
 8001704:	e013      	b.n	800172e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb73 	bl	8000df0 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	e009      	b.n	8001724 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fb6e 	bl	8000df0 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	4a91      	ldr	r2, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x624>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e116      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	4b8d      	ldr	r3, [pc, #564]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800172e:	231f      	movs	r3, #31
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	4b87      	ldr	r3, [pc, #540]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800173e:	4989      	ldr	r1, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x628>)
 8001740:	400a      	ands	r2, r1
 8001742:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2210      	movs	r2, #16
 800174a:	4013      	ands	r3, r2
 800174c:	d063      	beq.n	8001816 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d12a      	bne.n	80017ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001756:	4b81      	ldr	r3, [pc, #516]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175a:	4b80      	ldr	r3, [pc, #512]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800175c:	2104      	movs	r1, #4
 800175e:	430a      	orrs	r2, r1
 8001760:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001762:	4b7e      	ldr	r3, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001766:	4b7d      	ldr	r3, [pc, #500]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001768:	2101      	movs	r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fb3f 	bl	8000df0 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001778:	f7ff fb3a 	bl	8000df0 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0e3      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800178a:	4b74      	ldr	r3, [pc, #464]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d0f1      	beq.n	8001778 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001794:	4b71      	ldr	r3, [pc, #452]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001798:	22f8      	movs	r2, #248	; 0xf8
 800179a:	4393      	bics	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	00da      	lsls	r2, r3, #3
 80017a4:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	e034      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	3305      	adds	r3, #5
 80017b2:	d111      	bne.n	80017d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	438a      	bics	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017c0:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c4:	22f8      	movs	r2, #248	; 0xf8
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	00da      	lsls	r2, r3, #3
 80017d0:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e01e      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017d8:	4b60      	ldr	r3, [pc, #384]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017dc:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017de:	2104      	movs	r1, #4
 80017e0:	430a      	orrs	r2, r1
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017e4:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e8:	4b5c      	ldr	r3, [pc, #368]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	438a      	bics	r2, r1
 80017ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fafe 	bl	8000df0 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017fa:	f7ff faf9 	bl	8000df0 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0a2      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800180e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_RCC_OscConfig+0x4e4>
 800181e:	e097      	b.n	8001950 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4b4e      	ldr	r3, [pc, #312]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b08      	cmp	r3, #8
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x4f2>
 800182c:	e06b      	b.n	8001906 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d14c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b49      	ldr	r3, [pc, #292]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b48      	ldr	r3, [pc, #288]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800183c:	494a      	ldr	r1, [pc, #296]	; (8001968 <HAL_RCC_OscConfig+0x62c>)
 800183e:	400a      	ands	r2, r1
 8001840:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fad5 	bl	8000df0 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fad0 	bl	8000df0 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e079      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	049b      	lsls	r3, r3, #18
 8001866:	4013      	ands	r3, r2
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	220f      	movs	r2, #15
 8001870:	4393      	bics	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a3a      	ldr	r2, [pc, #232]	; (800196c <HAL_RCC_OscConfig+0x630>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	431a      	orrs	r2, r3
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0449      	lsls	r1, r1, #17
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff faa3 	bl	8000df0 <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fa9e 	bl	8000df0 <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e047      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	049b      	lsls	r3, r3, #18
 80018ca:	4013      	ands	r3, r2
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x574>
 80018ce:	e03f      	b.n	8001950 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80018d6:	4924      	ldr	r1, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x62c>)
 80018d8:	400a      	ands	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fa88 	bl	8000df0 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff fa83 	bl	8000df0 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e02c      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_RCC_OscConfig+0x620>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	049b      	lsls	r3, r3, #18
 8001900:	4013      	ands	r3, r2
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5aa>
 8001904:	e024      	b.n	8001950 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e01f      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_OscConfig+0x620>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_OscConfig+0x620>)
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	401a      	ands	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	429a      	cmp	r2, r3
 800192c:	d10e      	bne.n	800194c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	220f      	movs	r2, #15
 8001932:	401a      	ands	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	23f0      	movs	r3, #240	; 0xf0
 8001940:	039b      	lsls	r3, r3, #14
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b008      	add	sp, #32
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40021000 	.word	0x40021000
 8001960:	00001388 	.word	0x00001388
 8001964:	efffffff 	.word	0xefffffff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	ffc2ffff 	.word	0xffc2ffff

08001970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b3      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b5b      	ldr	r3, [pc, #364]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	4013      	ands	r3, r2
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d911      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	4393      	bics	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e09a      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d015      	beq.n	80019ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2204      	movs	r2, #4
 80019c6:	4013      	ands	r3, r2
 80019c8:	d006      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019ca:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 80019d0:	21e0      	movs	r1, #224	; 0xe0
 80019d2:	00c9      	lsls	r1, r1, #3
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	22f0      	movs	r2, #240	; 0xf0
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	d040      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	029b      	lsls	r3, r3, #10
 8001a06:	4013      	ands	r3, r2
 8001a08:	d114      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06e      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	049b      	lsls	r3, r3, #18
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e062      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e05b      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a48:	f7ff f9d2 	bl	8000df0 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7ff f9cd 	bl	8000df0 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <HAL_RCC_ClockConfig+0x18c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e042      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ec      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d211      	bcs.n	8001aaa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_RCC_ClockConfig+0x184>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e020      	b.n	8001aec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_RCC_ClockConfig+0x190>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ac8:	f000 f820 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001acc:	0001      	movs	r1, r0
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x188>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x194>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	000a      	movs	r2, r1
 8001ade:	40da      	lsrs	r2, r3
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x198>)
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f7ff f93d 	bl	8000d64 <HAL_InitTick>
  
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	00001388 	.word	0x00001388
 8001b00:	fffff8ff 	.word	0xfffff8ff
 8001b04:	080020f8 	.word	0x080020f8
 8001b08:	2000001c 	.word	0x2000001c

08001b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x30>
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x36>
 8001b3a:	e02c      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b3e:	613b      	str	r3, [r7, #16]
      break;
 8001b40:	e02c      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	220f      	movs	r2, #15
 8001b48:	4013      	ands	r3, r2
 8001b4a:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	220f      	movs	r2, #15
 8001b56:	4013      	ands	r3, r2
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	4013      	ands	r3, r2
 8001b66:	d009      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b6c:	f7fe facc 	bl	8000108 <__udivsi3>
 8001b70:	0003      	movs	r3, r0
 8001b72:	001a      	movs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4353      	muls	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e009      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	000a      	movs	r2, r1
 8001b80:	0152      	lsls	r2, r2, #5
 8001b82:	1a52      	subs	r2, r2, r1
 8001b84:	0193      	lsls	r3, r2, #6
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	185b      	adds	r3, r3, r1
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b98:	613b      	str	r3, [r7, #16]
      break;
 8001b9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b9c:	693b      	ldr	r3, [r7, #16]
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b006      	add	sp, #24
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	08002108 	.word	0x08002108
 8001bb4:	08002118 	.word	0x08002118

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e042      	b.n	8001c50 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	223d      	movs	r2, #61	; 0x3d
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	223c      	movs	r2, #60	; 0x3c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff f82f 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223d      	movs	r2, #61	; 0x3d
 8001bea:	2102      	movs	r1, #2
 8001bec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	0010      	movs	r0, r2
 8001bfa:	f000 f9af 	bl	8001f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2246      	movs	r2, #70	; 0x46
 8001c02:	2101      	movs	r1, #1
 8001c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	223e      	movs	r2, #62	; 0x3e
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	223f      	movs	r2, #63	; 0x3f
 8001c12:	2101      	movs	r1, #1
 8001c14:	5499      	strb	r1, [r3, r2]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	5499      	strb	r1, [r3, r2]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2241      	movs	r2, #65	; 0x41
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2242      	movs	r2, #66	; 0x42
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	5499      	strb	r1, [r3, r2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2243      	movs	r2, #67	; 0x43
 8001c32:	2101      	movs	r1, #1
 8001c34:	5499      	strb	r1, [r3, r2]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2244      	movs	r2, #68	; 0x44
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2245      	movs	r2, #69	; 0x45
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223d      	movs	r2, #61	; 0x3d
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	223d      	movs	r2, #61	; 0x3d
 8001c64:	5c9b      	ldrb	r3, [r3, r2]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e036      	b.n	8001cde <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	223d      	movs	r2, #61	; 0x3d
 8001c74:	2102      	movs	r1, #2
 8001c76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2101      	movs	r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <HAL_TIM_Base_Start_IT+0x90>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00a      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x50>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	05db      	lsls	r3, r3, #23
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d004      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x50>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_TIM_Base_Start_IT+0x94>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d010      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cca:	e007      	b.n	8001cdc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b004      	add	sp, #16
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40000400 	.word	0x40000400

08001cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d124      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d11d      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4252      	negs	r2, r2
 8001d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 f8fa 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001d38:	e007      	b.n	8001d4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f8ed 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 f8f9 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d125      	bne.n	8001daa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2204      	movs	r2, #4
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d11e      	bne.n	8001daa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2205      	movs	r2, #5
 8001d72:	4252      	negs	r2, r2
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f8cd 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f8c0 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 f8cc 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2208      	movs	r2, #8
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d124      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11d      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2209      	movs	r2, #9
 8001dcc:	4252      	negs	r2, r2
 8001dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4013      	ands	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f8a1 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001dea:	e007      	b.n	8001dfc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f894 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8a0 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d125      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2210      	movs	r2, #16
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d11e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2211      	movs	r2, #17
 8001e24:	4252      	negs	r2, r2
 8001e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f874 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001e44:	e007      	b.n	8001e56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 f867 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f873 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10f      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4252      	negs	r2, r2
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fa9f 	bl	80003c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d10f      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b80      	cmp	r3, #128	; 0x80
 8001ea4:	d108      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2281      	movs	r2, #129	; 0x81
 8001eac:	4252      	negs	r2, r2
 8001eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f8d0 	bl	8002058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b40      	cmp	r3, #64	; 0x40
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2240      	movs	r2, #64	; 0x40
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d108      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2241      	movs	r2, #65	; 0x41
 8001eda:	4252      	negs	r2, r2
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 f833 	bl	8001f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2220      	movs	r2, #32
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d10f      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d108      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2221      	movs	r2, #33	; 0x21
 8001f08:	4252      	negs	r2, r2
 8001f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f89a 	bl	8002048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <TIM_Base_SetConfig+0xd4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d008      	beq.n	8001f86 <TIM_Base_SetConfig+0x2a>
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0x2a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <TIM_Base_SetConfig+0xd8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2270      	movs	r2, #112	; 0x70
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a25      	ldr	r2, [pc, #148]	; (8002030 <TIM_Base_SetConfig+0xd4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d014      	beq.n	8001fca <TIM_Base_SetConfig+0x6e>
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	05db      	lsls	r3, r3, #23
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d00f      	beq.n	8001fca <TIM_Base_SetConfig+0x6e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <TIM_Base_SetConfig+0xd8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <TIM_Base_SetConfig+0x6e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <TIM_Base_SetConfig+0xdc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <TIM_Base_SetConfig+0x6e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <TIM_Base_SetConfig+0xe0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d003      	beq.n	8001fca <TIM_Base_SetConfig+0x6e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <TIM_Base_SetConfig+0xe8>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <TIM_Base_SetConfig+0xd4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <TIM_Base_SetConfig+0xbe>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <TIM_Base_SetConfig+0xe0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d003      	beq.n	800201a <TIM_Base_SetConfig+0xbe>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d103      	bne.n	8002022 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	615a      	str	r2, [r3, #20]
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400
 8002038:	40002000 	.word	0x40002000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	fffffcff 	.word	0xfffffcff

08002048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}

08002068 <__libc_init_array>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	2600      	movs	r6, #0
 800206c:	4d0c      	ldr	r5, [pc, #48]	; (80020a0 <__libc_init_array+0x38>)
 800206e:	4c0d      	ldr	r4, [pc, #52]	; (80020a4 <__libc_init_array+0x3c>)
 8002070:	1b64      	subs	r4, r4, r5
 8002072:	10a4      	asrs	r4, r4, #2
 8002074:	42a6      	cmp	r6, r4
 8002076:	d109      	bne.n	800208c <__libc_init_array+0x24>
 8002078:	2600      	movs	r6, #0
 800207a:	f000 f821 	bl	80020c0 <_init>
 800207e:	4d0a      	ldr	r5, [pc, #40]	; (80020a8 <__libc_init_array+0x40>)
 8002080:	4c0a      	ldr	r4, [pc, #40]	; (80020ac <__libc_init_array+0x44>)
 8002082:	1b64      	subs	r4, r4, r5
 8002084:	10a4      	asrs	r4, r4, #2
 8002086:	42a6      	cmp	r6, r4
 8002088:	d105      	bne.n	8002096 <__libc_init_array+0x2e>
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	00b3      	lsls	r3, r6, #2
 800208e:	58eb      	ldr	r3, [r5, r3]
 8002090:	4798      	blx	r3
 8002092:	3601      	adds	r6, #1
 8002094:	e7ee      	b.n	8002074 <__libc_init_array+0xc>
 8002096:	00b3      	lsls	r3, r6, #2
 8002098:	58eb      	ldr	r3, [r5, r3]
 800209a:	4798      	blx	r3
 800209c:	3601      	adds	r6, #1
 800209e:	e7f2      	b.n	8002086 <__libc_init_array+0x1e>
 80020a0:	08002128 	.word	0x08002128
 80020a4:	08002128 	.word	0x08002128
 80020a8:	08002128 	.word	0x08002128
 80020ac:	0800212c 	.word	0x0800212c

080020b0 <memset>:
 80020b0:	0003      	movs	r3, r0
 80020b2:	1882      	adds	r2, r0, r2
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d100      	bne.n	80020ba <memset+0xa>
 80020b8:	4770      	bx	lr
 80020ba:	7019      	strb	r1, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	e7f9      	b.n	80020b4 <memset+0x4>

080020c0 <_init>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c6:	bc08      	pop	{r3}
 80020c8:	469e      	mov	lr, r3
 80020ca:	4770      	bx	lr

080020cc <_fini>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d2:	bc08      	pop	{r3}
 80020d4:	469e      	mov	lr, r3
 80020d6:	4770      	bx	lr
