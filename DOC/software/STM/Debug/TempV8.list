
TempV8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002794  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a4  080028a4  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080028a4  080028a4  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a4  080028a4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080028ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000028  080028d4  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080028d4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d40  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001961  00000000  00000000  00028d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f855  00000000  00000000  0002ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af51  00000000  00000000  0003b285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f720  00000000  00000000  000461d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a58f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002384  00000000  00000000  000a594c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800283c 	.word	0x0800283c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	0800283c 	.word	0x0800283c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fdac 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f832 	bl	8000290 <SystemClock_Config>
//  HAL_RCC_DeInit();
//  SysTick->CTRL = 0;
//  SysTick->LOAD = 0;
//  SysTick->VAL = 0;
//  __disable_irq();
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <main+0x64>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b14      	ldr	r3, [pc, #80]	; (8000284 <main+0x64>)
 8000232:	2110      	movs	r1, #16
 8000234:	438a      	bics	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
  /* Unlock Flash Control register and Option Bytes */
  HAL_FLASH_Unlock();
 8000238:	f000 fee4 	bl	8001004 <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 800023c:	f000 ff08 	bl	8001050 <HAL_FLASH_OB_Unlock>
  HAL_FLASHEx_OBGetConfig(&OptionsBytesInit);
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x68>)
 8000242:	0018      	movs	r0, r3
 8000244:	f001 f884 	bl	8001350 <HAL_FLASHEx_OBGetConfig>


  if(OptionsBytesInit.RDPLevel!=OB_RDP_LEVEL_1)
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <main+0x68>)
 800024a:	7b1b      	ldrb	r3, [r3, #12]
 800024c:	2bbb      	cmp	r3, #187	; 0xbb
 800024e:	d00b      	beq.n	8000268 <main+0x48>
  {
	  /* First step: Choose option byte type.*/
	  OptionsBytesInit.OptionType =OPTIONBYTE_RDP;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0x68>)
 8000252:	2202      	movs	r2, #2
 8000254:	601a      	str	r2, [r3, #0]
	  OptionsBytesInit.RDPLevel = OB_RDP_LEVEL_1;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x68>)
 8000258:	22bb      	movs	r2, #187	; 0xbb
 800025a:	731a      	strb	r2, [r3, #12]
	  /* Program Option Bytes */
	  HAL_FLASHEx_OBProgram(&OptionsBytesInit);
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0x68>)
 800025e:	0018      	movs	r0, r3
 8000260:	f000 ffe4 	bl	800122c <HAL_FLASHEx_OBProgram>
	  /* Launch Option Bytes Loading */
	  HAL_FLASH_OB_Launch();
 8000264:	f000 ff0e 	bl	8001084 <HAL_FLASH_OB_Launch>
  }
  // RDP Level 1 Setting End //
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 f886 	bl	8000378 <MX_GPIO_Init>
  MX_TIM16_Init();
 800026c:	f000 f85a 	bl	8000324 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <main+0x6c>)
 8000272:	0018      	movs	r0, r3
 8000274:	f002 f8ae 	bl	80023d4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	proc_state_vars();
 8000278:	f000 f9b4 	bl	80005e4 <proc_state_vars>
	main_sys();
 800027c:	f000 fa68 	bl	8000750 <main_sys>
	proc_state_vars();
 8000280:	e7fa      	b.n	8000278 <main+0x58>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000
 8000288:	20000060 	.word	0x20000060
 800028c:	20000078 	.word	0x20000078

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b091      	sub	sp, #68	; 0x44
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2410      	movs	r4, #16
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 fac3 	bl	800282c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	2310      	movs	r3, #16
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f002 fabc 	bl	800282c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2210      	movs	r2, #16
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	22c0      	movs	r2, #192	; 0xc0
 80002d8:	0352      	lsls	r2, r2, #13
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fbe7 	bl	8001ab8 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ee:	f000 fca1 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	003b      	movs	r3, r7
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2202      	movs	r2, #2
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	2101      	movs	r1, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 feec 	bl	80020ec <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000318:	f000 fc8c 	bl	8000c34 <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b011      	add	sp, #68	; 0x44
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_TIM16_Init+0x44>)
 800032a:	4a10      	ldr	r2, [pc, #64]	; (800036c <MX_TIM16_Init+0x48>)
 800032c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200 - 1;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_TIM16_Init+0x44>)
 8000330:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <MX_TIM16_Init+0x4c>)
 8000332:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_TIM16_Init+0x44>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000 - 1;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_TIM16_Init+0x44>)
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <MX_TIM16_Init+0x50>)
 800033e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_TIM16_Init+0x44>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_TIM16_Init+0x44>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_TIM16_Init+0x44>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <MX_TIM16_Init+0x44>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 ffed 	bl	8002334 <HAL_TIM_Base_Init>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800035e:	f000 fc69 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000078 	.word	0x20000078
 800036c:	40014400 	.word	0x40014400
 8000370:	00000c7f 	.word	0x00000c7f
 8000374:	00001387 	.word	0x00001387

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	0018      	movs	r0, r3
 8000382:	2314      	movs	r3, #20
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f002 fa50 	bl	800282c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_GPIO_Init+0x90>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_GPIO_Init+0x90>)
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	0289      	lsls	r1, r1, #10
 8000396:	430a      	orrs	r2, r1
 8000398:	615a      	str	r2, [r3, #20]
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_GPIO_Init+0x90>)
 800039c:	695a      	ldr	r2, [r3, #20]
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	029b      	lsls	r3, r3, #10
 80003a2:	4013      	ands	r3, r2
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|FAN_Pin|EXTGAS_Pin, GPIO_PIN_RESET);
 80003a8:	23b8      	movs	r3, #184	; 0xb8
 80003aa:	0099      	lsls	r1, r3, #2
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	2200      	movs	r2, #0
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fb47 	bl	8001a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VALV_Pin LIMITE_Pin G_Pin W_Pin
                           VACIO_Pin */
  GPIO_InitStruct.Pin = VALV_Pin|LIMITE_Pin|G_Pin|W_Pin
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	221f      	movs	r2, #31
 80003bc:	601a      	str	r2, [r3, #0]
                          |VACIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	1d3a      	adds	r2, r7, #4
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	0011      	movs	r1, r2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 f9b2 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin FAN_Pin EXTGAS_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|FAN_Pin|EXTGAS_Pin;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	22b8      	movs	r2, #184	; 0xb8
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2201      	movs	r2, #1
 80003e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2203      	movs	r2, #3
 80003f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	0011      	movs	r1, r2
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 f99e 	bl	800173c <HAL_GPIO_Init>

}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b006      	add	sp, #24
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000418:	429a      	cmp	r2, r3
 800041a:	d11f      	bne.n	800045c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		// Elapsed 0.5s
		if(hab_timer == 1){ // General counter
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d106      	bne.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x26>
			cont++;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800042e:	801a      	strh	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}else{
			cont = 0;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000434:	2200      	movs	r2, #0
 8000436:	801a      	strh	r2, [r3, #0]
		}

		if(hab_timer_c == 1){ // General counter
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d106      	bne.n	800044e <HAL_TIM_PeriodElapsedCallback+0x42>
			cont_c++;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	b29a      	uxth	r2, r3
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800044a:	801a      	strh	r2, [r3, #0]
 800044c:	e002      	b.n	8000454 <HAL_TIM_PeriodElapsedCallback+0x48>
		}else{
			cont_c = 0;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000450:	2200      	movs	r2, #0
 8000452:	801a      	strh	r2, [r3, #0]
		}

		input_chk();
 8000454:	f000 f810 	bl	8000478 <input_chk>
		indicator_update();
 8000458:	f000 f99a 	bl	8000790 <indicator_update>
	}
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000078 	.word	0x20000078
 8000468:	2000004a 	.word	0x2000004a
 800046c:	20000046 	.word	0x20000046
 8000470:	2000004c 	.word	0x2000004c
 8000474:	20000048 	.word	0x20000048

08000478 <input_chk>:

void input_chk(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800047e:	1dbb      	adds	r3, r7, #6
 8000480:	2200      	movs	r2, #0
 8000482:	801a      	strh	r2, [r3, #0]
	// Read actual input states
	input_state[0] = G;
 8000484:	2390      	movs	r3, #144	; 0x90
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2104      	movs	r1, #4
 800048a:	0018      	movs	r0, r3
 800048c:	f001 fabe 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000490:	0003      	movs	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b50      	ldr	r3, [pc, #320]	; (80005d8 <input_chk+0x160>)
 8000496:	801a      	strh	r2, [r3, #0]
	input_state[1] = W;
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2108      	movs	r1, #8
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fab4 	bl	8001a0c <HAL_GPIO_ReadPin>
 80004a4:	0003      	movs	r3, r0
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	4b4b      	ldr	r3, [pc, #300]	; (80005d8 <input_chk+0x160>)
 80004aa:	805a      	strh	r2, [r3, #2]
	input_state[2] = LIMITE;
 80004ac:	2390      	movs	r3, #144	; 0x90
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	2102      	movs	r1, #2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 faaa 	bl	8001a0c <HAL_GPIO_ReadPin>
 80004b8:	0003      	movs	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b46      	ldr	r3, [pc, #280]	; (80005d8 <input_chk+0x160>)
 80004be:	809a      	strh	r2, [r3, #4]
	input_state[3] = VALV;
 80004c0:	2390      	movs	r3, #144	; 0x90
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2101      	movs	r1, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 faa0 	bl	8001a0c <HAL_GPIO_ReadPin>
 80004cc:	0003      	movs	r3, r0
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	4b41      	ldr	r3, [pc, #260]	; (80005d8 <input_chk+0x160>)
 80004d2:	80da      	strh	r2, [r3, #6]
	input_state[4] = VACIO;
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2110      	movs	r1, #16
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fa96 	bl	8001a0c <HAL_GPIO_ReadPin>
 80004e0:	0003      	movs	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <input_chk+0x160>)
 80004e6:	811a      	strh	r2, [r3, #8]
	// Process new states
	for(i = 0; i < 6; i++){
 80004e8:	1dbb      	adds	r3, r7, #6
 80004ea:	2200      	movs	r2, #0
 80004ec:	801a      	strh	r2, [r3, #0]
 80004ee:	e069      	b.n	80005c4 <input_chk+0x14c>
		if(input_state[i] != state_vars[i]){
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	881a      	ldrh	r2, [r3, #0]
 80004f4:	4b38      	ldr	r3, [pc, #224]	; (80005d8 <input_chk+0x160>)
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	5ad2      	ldrh	r2, [r2, r3]
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	8819      	ldrh	r1, [r3, #0]
 80004fe:	4b37      	ldr	r3, [pc, #220]	; (80005dc <input_chk+0x164>)
 8000500:	0049      	lsls	r1, r1, #1
 8000502:	5acb      	ldrh	r3, [r1, r3]
 8000504:	429a      	cmp	r2, r3
 8000506:	d04b      	beq.n	80005a0 <input_chk+0x128>
			if((input_state[i] == CLOSE)&&(state_vars[i] == OPEN)){
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <input_chk+0x160>)
 800050e:	0052      	lsls	r2, r2, #1
 8000510:	5ad3      	ldrh	r3, [r2, r3]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d11e      	bne.n	8000554 <input_chk+0xdc>
 8000516:	1dbb      	adds	r3, r7, #6
 8000518:	881a      	ldrh	r2, [r3, #0]
 800051a:	4b30      	ldr	r3, [pc, #192]	; (80005dc <input_chk+0x164>)
 800051c:	0052      	lsls	r2, r2, #1
 800051e:	5ad3      	ldrh	r3, [r2, r3]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d117      	bne.n	8000554 <input_chk+0xdc>
				count_vars[i]++;
 8000524:	1dbb      	adds	r3, r7, #6
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	4a2d      	ldr	r2, [pc, #180]	; (80005e0 <input_chk+0x168>)
 800052a:	0059      	lsls	r1, r3, #1
 800052c:	5a8a      	ldrh	r2, [r1, r2]
 800052e:	3201      	adds	r2, #1
 8000530:	b291      	uxth	r1, r2
 8000532:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <input_chk+0x168>)
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	5299      	strh	r1, [r3, r2]
				if(count_vars[i] == 6){ // 3s
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	881a      	ldrh	r2, [r3, #0]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <input_chk+0x168>)
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	5ad3      	ldrh	r3, [r2, r3]
 8000542:	2b06      	cmp	r3, #6
 8000544:	d139      	bne.n	80005ba <input_chk+0x142>
					state_vars[i] = CLOSE;
 8000546:	1dbb      	adds	r3, r7, #6
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <input_chk+0x164>)
 800054c:	0052      	lsls	r2, r2, #1
 800054e:	2101      	movs	r1, #1
 8000550:	52d1      	strh	r1, [r2, r3]
				if(count_vars[i] == 6){ // 3s
 8000552:	e032      	b.n	80005ba <input_chk+0x142>
				}
			}
			else if((input_state[i] == OPEN)&&(state_vars[i] == CLOSE)){
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <input_chk+0x160>)
 800055a:	0052      	lsls	r2, r2, #1
 800055c:	5ad3      	ldrh	r3, [r2, r3]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d12b      	bne.n	80005ba <input_chk+0x142>
 8000562:	1dbb      	adds	r3, r7, #6
 8000564:	881a      	ldrh	r2, [r3, #0]
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <input_chk+0x164>)
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	5ad3      	ldrh	r3, [r2, r3]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d124      	bne.n	80005ba <input_chk+0x142>
				count_vars[i]++;
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <input_chk+0x168>)
 8000576:	0059      	lsls	r1, r3, #1
 8000578:	5a8a      	ldrh	r2, [r1, r2]
 800057a:	3201      	adds	r2, #1
 800057c:	b291      	uxth	r1, r2
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <input_chk+0x168>)
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	5299      	strh	r1, [r3, r2]
				if(count_vars[i] == 6){ // 3s
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881a      	ldrh	r2, [r3, #0]
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <input_chk+0x168>)
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	5ad3      	ldrh	r3, [r2, r3]
 800058e:	2b06      	cmp	r3, #6
 8000590:	d113      	bne.n	80005ba <input_chk+0x142>
					state_vars[i] = OPEN;
 8000592:	1dbb      	adds	r3, r7, #6
 8000594:	881a      	ldrh	r2, [r3, #0]
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <input_chk+0x164>)
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	2100      	movs	r1, #0
 800059c:	52d1      	strh	r1, [r2, r3]
 800059e:	e00c      	b.n	80005ba <input_chk+0x142>
				}
			}
		}else{
			if(count_vars[i] != 0) count_vars[i] = 0;
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	881a      	ldrh	r2, [r3, #0]
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <input_chk+0x168>)
 80005a6:	0052      	lsls	r2, r2, #1
 80005a8:	5ad3      	ldrh	r3, [r2, r3]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <input_chk+0x142>
 80005ae:	1dbb      	adds	r3, r7, #6
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <input_chk+0x168>)
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	52d1      	strh	r1, [r2, r3]
	for(i = 0; i < 6; i++){
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	881a      	ldrh	r2, [r3, #0]
 80005be:	1dbb      	adds	r3, r7, #6
 80005c0:	3201      	adds	r2, #1
 80005c2:	801a      	strh	r2, [r3, #0]
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d800      	bhi.n	80005ce <input_chk+0x156>
 80005cc:	e790      	b.n	80004f0 <input_chk+0x78>
		}
	}

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000010 	.word	0x20000010
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000054 	.word	0x20000054

080005e4 <proc_state_vars>:

void proc_state_vars(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	if(state_vars[LIM_sw] == CLOSE){ // Normal operation
 80005e8:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <proc_state_vars+0x144>)
 80005ea:	889b      	ldrh	r3, [r3, #4]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <proc_state_vars+0x5c>
		if(sys == OFF){
 80005f0:	4b4e      	ldr	r3, [pc, #312]	; (800072c <proc_state_vars+0x148>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10e      	bne.n	8000616 <proc_state_vars+0x32>
			if(state_vars[G_sw] == CLOSE){
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <proc_state_vars+0x144>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d103      	bne.n	8000608 <proc_state_vars+0x24>
				sys = COOL;
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <proc_state_vars+0x148>)
 8000602:	2202      	movs	r2, #2
 8000604:	801a      	strh	r2, [r3, #0]
 8000606:	e006      	b.n	8000616 <proc_state_vars+0x32>
			}else if(state_vars[W_sw] == CLOSE){
 8000608:	4b47      	ldr	r3, [pc, #284]	; (8000728 <proc_state_vars+0x144>)
 800060a:	885b      	ldrh	r3, [r3, #2]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <proc_state_vars+0x32>
				sys = HEAT;
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <proc_state_vars+0x148>)
 8000612:	2201      	movs	r2, #1
 8000614:	801a      	strh	r2, [r3, #0]
			}
		}

		if(fail_state == ERROR){
 8000616:	4b46      	ldr	r3, [pc, #280]	; (8000730 <proc_state_vars+0x14c>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d110      	bne.n	8000640 <proc_state_vars+0x5c>
			fail_state = CLEAR;
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <proc_state_vars+0x14c>)
 8000620:	2200      	movs	r2, #0
 8000622:	801a      	strh	r2, [r3, #0]
			if(state_vars[G_sw] == OPEN){
 8000624:	4b40      	ldr	r3, [pc, #256]	; (8000728 <proc_state_vars+0x144>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d106      	bne.n	800063a <proc_state_vars+0x56>
				FAN_OFF;
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2200      	movs	r2, #0
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fa06 	bl	8001a46 <HAL_GPIO_WritePin>
			}
			proc_heat = 1;
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <proc_state_vars+0x150>)
 800063c:	2201      	movs	r2, #1
 800063e:	801a      	strh	r2, [r3, #0]
		}
	}
	if(state_vars[LIM_sw] == OPEN){ // Limit OPEN
 8000640:	4b39      	ldr	r3, [pc, #228]	; (8000728 <proc_state_vars+0x144>)
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d16b      	bne.n	8000720 <proc_state_vars+0x13c>
		if(fail_state == CLEAR){
 8000648:	4b39      	ldr	r3, [pc, #228]	; (8000730 <proc_state_vars+0x14c>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d128      	bne.n	80006a2 <proc_state_vars+0xbe>
			fail_state = ERROR;
 8000650:	4b37      	ldr	r3, [pc, #220]	; (8000730 <proc_state_vars+0x14c>)
 8000652:	2201      	movs	r2, #1
 8000654:	801a      	strh	r2, [r3, #0]
			fail_times++;
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <proc_state_vars+0x154>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <proc_state_vars+0x154>)
 8000660:	801a      	strh	r2, [r3, #0]
			if(fail_times >= FAIL_LIMIT){
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <proc_state_vars+0x154>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d91b      	bls.n	80006a2 <proc_state_vars+0xbe>
				sys = HEAT;
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <proc_state_vars+0x148>)
 800066c:	2201      	movs	r2, #1
 800066e:	801a      	strh	r2, [r3, #0]
				hab_timer = 0;
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <proc_state_vars+0x158>)
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]
				cont = 0;
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <proc_state_vars+0x15c>)
 8000678:	2200      	movs	r2, #0
 800067a:	801a      	strh	r2, [r3, #0]
				proc_heat = 5;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <proc_state_vars+0x150>)
 800067e:	2205      	movs	r2, #5
 8000680:	801a      	strh	r2, [r3, #0]
				EXTGAS_OFF;
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	0099      	lsls	r1, r3, #2
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2200      	movs	r2, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f001 f9da 	bl	8001a46 <HAL_GPIO_WritePin>
				FAN_ON;
 8000692:	2390      	movs	r3, #144	; 0x90
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2201      	movs	r2, #1
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0018      	movs	r0, r3
 800069c:	f001 f9d3 	bl	8001a46 <HAL_GPIO_WritePin>
				while(1){
 80006a0:	e7fe      	b.n	80006a0 <proc_state_vars+0xbc>
					// Endless block
				}
			}
		}
		if((sys != HEAT)||(proc_heat != 5)){
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <proc_state_vars+0x148>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d103      	bne.n	80006b2 <proc_state_vars+0xce>
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <proc_state_vars+0x150>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d023      	beq.n	80006fa <proc_state_vars+0x116>
			sys = HEAT;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <proc_state_vars+0x148>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	801a      	strh	r2, [r3, #0]
			hab_timer = 0;
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <proc_state_vars+0x158>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	801a      	strh	r2, [r3, #0]
			cont = 0;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <proc_state_vars+0x15c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	801a      	strh	r2, [r3, #0]
			hab_timer_c = 0;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <proc_state_vars+0x160>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]
			cont_c = 0;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <proc_state_vars+0x164>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	801a      	strh	r2, [r3, #0]
			proc_cool = 1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <proc_state_vars+0x168>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	801a      	strh	r2, [r3, #0]
			proc_heat = 5;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <proc_state_vars+0x150>)
 80006d8:	2205      	movs	r2, #5
 80006da:	801a      	strh	r2, [r3, #0]
			EXTGAS_OFF;
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	0099      	lsls	r1, r3, #2
 80006e0:	2390      	movs	r3, #144	; 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2200      	movs	r2, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 f9ad 	bl	8001a46 <HAL_GPIO_WritePin>
			FAN_ON;
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2201      	movs	r2, #1
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 f9a6 	bl	8001a46 <HAL_GPIO_WritePin>
		}
		if(EXTGAS_STATUS == ON){
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	009a      	lsls	r2, r3, #2
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f981 	bl	8001a0c <HAL_GPIO_ReadPin>
 800070a:	0003      	movs	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d107      	bne.n	8000720 <proc_state_vars+0x13c>
			EXTGAS_OFF;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	0099      	lsls	r1, r3, #2
 8000714:	2390      	movs	r3, #144	; 0x90
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	2200      	movs	r2, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f001 f993 	bl	8001a46 <HAL_GPIO_WritePin>
		}
	}
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000004 	.word	0x20000004
 800072c:	20000044 	.word	0x20000044
 8000730:	20000050 	.word	0x20000050
 8000734:	20000000 	.word	0x20000000
 8000738:	2000004e 	.word	0x2000004e
 800073c:	2000004a 	.word	0x2000004a
 8000740:	20000046 	.word	0x20000046
 8000744:	2000004c 	.word	0x2000004c
 8000748:	20000048 	.word	0x20000048
 800074c:	20000002 	.word	0x20000002

08000750 <main_sys>:

void main_sys(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	switch(sys){
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main_sys+0x3c>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d00e      	beq.n	800077a <main_sys+0x2a>
 800075c:	dc13      	bgt.n	8000786 <main_sys+0x36>
 800075e:	2b02      	cmp	r3, #2
 8000760:	d005      	beq.n	800076e <main_sys+0x1e>
 8000762:	dc10      	bgt.n	8000786 <main_sys+0x36>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00d      	beq.n	8000784 <main_sys+0x34>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d003      	beq.n	8000774 <main_sys+0x24>
		break;
	case HEAT_VENT:
		cool_process();
		heat_process();
	}
}
 800076c:	e00b      	b.n	8000786 <main_sys+0x36>
		cool_process();
 800076e:	f000 f8ab 	bl	80008c8 <cool_process>
		break;
 8000772:	e008      	b.n	8000786 <main_sys+0x36>
		heat_process();
 8000774:	f000 f954 	bl	8000a20 <heat_process>
		break;
 8000778:	e005      	b.n	8000786 <main_sys+0x36>
		cool_process();
 800077a:	f000 f8a5 	bl	80008c8 <cool_process>
		heat_process();
 800077e:	f000 f94f 	bl	8000a20 <heat_process>
}
 8000782:	e000      	b.n	8000786 <main_sys+0x36>
		break;
 8000784:	46c0      	nop			; (mov r8, r8)
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000044 	.word	0x20000044

08000790 <indicator_update>:

void indicator_update(void){
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	af00      	add	r7, sp, #0
	if(fail_times >= FAIL_LIMIT){
 8000794:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <indicator_update+0x128>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d90e      	bls.n	80007ba <indicator_update+0x2a>
		LED_GREEN_OFF;
 800079c:	2390      	movs	r3, #144	; 0x90
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2200      	movs	r2, #0
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 f94e 	bl	8001a46 <HAL_GPIO_WritePin>
		LED_RED_ON;
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 f947 	bl	8001a46 <HAL_GPIO_WritePin>
		}else if(state_vars[LIM_sw] == OPEN){
			LED_GREEN_OFF;
			LED_RED_TOGGLE;
		}
	}
}
 80007b8:	e07b      	b.n	80008b2 <indicator_update+0x122>
		if(state_vars[LIM_sw] == CLOSE){
 80007ba:	4b40      	ldr	r3, [pc, #256]	; (80008bc <indicator_update+0x12c>)
 80007bc:	889b      	ldrh	r3, [r3, #4]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d165      	bne.n	800088e <indicator_update+0xfe>
			if((sys == HEAT)&&(proc_heat == 3)){
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <indicator_update+0x130>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d111      	bne.n	80007ee <indicator_update+0x5e>
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <indicator_update+0x134>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d10d      	bne.n	80007ee <indicator_update+0x5e>
				LED_RED_OFF;
 80007d2:	2390      	movs	r3, #144	; 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f933 	bl	8001a46 <HAL_GPIO_WritePin>
				LED_GREEN_TOGGLE;
 80007e0:	2390      	movs	r3, #144	; 0x90
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	2140      	movs	r1, #64	; 0x40
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f94a 	bl	8001a80 <HAL_GPIO_TogglePin>
 80007ec:	e061      	b.n	80008b2 <indicator_update+0x122>
			}else if((sys == HEAT)&&(proc_heat == 1)&&(state_vars[VACIO_sw] == CLOSE)){
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <indicator_update+0x130>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d134      	bne.n	8000860 <indicator_update+0xd0>
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <indicator_update+0x134>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d130      	bne.n	8000860 <indicator_update+0xd0>
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <indicator_update+0x12c>)
 8000800:	891b      	ldrh	r3, [r3, #8]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d12c      	bne.n	8000860 <indicator_update+0xd0>
				if(LED_GREEN_STATUS == LED_RED_STATUS){
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	0018      	movs	r0, r3
 800080e:	f001 f8fd 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000812:	0003      	movs	r3, r0
 8000814:	001c      	movs	r4, r3
 8000816:	2390      	movs	r3, #144	; 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2120      	movs	r1, #32
 800081c:	0018      	movs	r0, r3
 800081e:	f001 f8f5 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000822:	0003      	movs	r3, r0
 8000824:	429c      	cmp	r4, r3
 8000826:	d10e      	bne.n	8000846 <indicator_update+0xb6>
					LED_GREEN_OFF;
 8000828:	2390      	movs	r3, #144	; 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2200      	movs	r2, #0
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f908 	bl	8001a46 <HAL_GPIO_WritePin>
					LED_RED_ON;
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f901 	bl	8001a46 <HAL_GPIO_WritePin>
				if(LED_GREEN_STATUS == LED_RED_STATUS){
 8000844:	e035      	b.n	80008b2 <indicator_update+0x122>
					LED_GREEN_TOGGLE;
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	0018      	movs	r0, r3
 800084e:	f001 f917 	bl	8001a80 <HAL_GPIO_TogglePin>
					LED_RED_TOGGLE;
 8000852:	2390      	movs	r3, #144	; 0x90
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2120      	movs	r1, #32
 8000858:	0018      	movs	r0, r3
 800085a:	f001 f911 	bl	8001a80 <HAL_GPIO_TogglePin>
				if(LED_GREEN_STATUS == LED_RED_STATUS){
 800085e:	e028      	b.n	80008b2 <indicator_update+0x122>
				LED_RED_OFF;
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2200      	movs	r2, #0
 8000866:	2120      	movs	r1, #32
 8000868:	0018      	movs	r0, r3
 800086a:	f001 f8ec 	bl	8001a46 <HAL_GPIO_WritePin>
				if(LED_GREEN_STATUS == OFF){
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	0018      	movs	r0, r3
 8000876:	f001 f8c9 	bl	8001a0c <HAL_GPIO_ReadPin>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d119      	bne.n	80008b2 <indicator_update+0x122>
					LED_GREEN_ON;
 800087e:	2390      	movs	r3, #144	; 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2201      	movs	r2, #1
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	0018      	movs	r0, r3
 8000888:	f001 f8dd 	bl	8001a46 <HAL_GPIO_WritePin>
}
 800088c:	e011      	b.n	80008b2 <indicator_update+0x122>
		}else if(state_vars[LIM_sw] == OPEN){
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <indicator_update+0x12c>)
 8000890:	889b      	ldrh	r3, [r3, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10d      	bne.n	80008b2 <indicator_update+0x122>
			LED_GREEN_OFF;
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f8d1 	bl	8001a46 <HAL_GPIO_WritePin>
			LED_RED_TOGGLE;
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2120      	movs	r1, #32
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 f8e8 	bl	8001a80 <HAL_GPIO_TogglePin>
}
 80008b0:	e7ff      	b.n	80008b2 <indicator_update+0x122>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	2000004e 	.word	0x2000004e
 80008bc:	20000004 	.word	0x20000004
 80008c0:	20000044 	.word	0x20000044
 80008c4:	20000000 	.word	0x20000000

080008c8 <cool_process>:

void cool_process(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	switch(proc_cool){
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <cool_process+0x138>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d02d      	beq.n	8000930 <cool_process+0x68>
 80008d4:	dc2f      	bgt.n	8000936 <cool_process+0x6e>
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d002      	beq.n	80008e0 <cool_process+0x18>
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d00a      	beq.n	80008f4 <cool_process+0x2c>
 80008de:	e02a      	b.n	8000936 <cool_process+0x6e>
	case 1:
		hab_timer_c = 1;
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <cool_process+0x13c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	801a      	strh	r2, [r3, #0]
		cont_c = 0;
 80008e6:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <cool_process+0x140>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	801a      	strh	r2, [r3, #0]
		proc_cool = 2;
 80008ec:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <cool_process+0x138>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	801a      	strh	r2, [r3, #0]
		break;
 80008f2:	e020      	b.n	8000936 <cool_process+0x6e>
	case 2:
		if((cont_c == 20)||(FAN_STATUS == ON)){ // 10s
 80008f4:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <cool_process+0x140>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	2b14      	cmp	r3, #20
 80008fa:	d008      	beq.n	800090e <cool_process+0x46>
 80008fc:	2390      	movs	r3, #144	; 0x90
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0018      	movs	r0, r3
 8000904:	f001 f882 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000908:	0003      	movs	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d112      	bne.n	8000934 <cool_process+0x6c>
			FAN_ON;
 800090e:	2390      	movs	r3, #144	; 0x90
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f895 	bl	8001a46 <HAL_GPIO_WritePin>
			hab_timer_c = 0;
 800091c:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <cool_process+0x13c>)
 800091e:	2200      	movs	r2, #0
 8000920:	801a      	strh	r2, [r3, #0]
			cont_c = 0;
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <cool_process+0x140>)
 8000924:	2200      	movs	r2, #0
 8000926:	801a      	strh	r2, [r3, #0]
			proc_cool = 3;
 8000928:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <cool_process+0x138>)
 800092a:	2203      	movs	r2, #3
 800092c:	801a      	strh	r2, [r3, #0]
		}
		break;
 800092e:	e001      	b.n	8000934 <cool_process+0x6c>
	case 3:
		// COOL ON
		break;
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	e000      	b.n	8000936 <cool_process+0x6e>
		break;
 8000934:	46c0      	nop			; (mov r8, r8)
	}
	if(sys != OFF){
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <cool_process+0x144>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d05d      	beq.n	80009fa <cool_process+0x132>
		if(sys == COOL){
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <cool_process+0x144>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d11f      	bne.n	8000986 <cool_process+0xbe>
			if(state_vars[G_sw] == OPEN){
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <cool_process+0x148>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d113      	bne.n	8000976 <cool_process+0xae>
				hab_timer_c = 0;
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <cool_process+0x13c>)
 8000950:	2200      	movs	r2, #0
 8000952:	801a      	strh	r2, [r3, #0]
				cont_c = 0;
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <cool_process+0x140>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
				proc_cool = 1;
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <cool_process+0x138>)
 800095c:	2201      	movs	r2, #1
 800095e:	801a      	strh	r2, [r3, #0]
				FAN_OFF;
 8000960:	2390      	movs	r3, #144	; 0x90
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	0018      	movs	r0, r3
 800096a:	f001 f86c 	bl	8001a46 <HAL_GPIO_WritePin>
				sys = OFF;
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <cool_process+0x144>)
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
					sys = COOL;
				}
			}
		}
	}
}
 8000974:	e041      	b.n	80009fa <cool_process+0x132>
			}else if(state_vars[W_sw] == CLOSE){
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <cool_process+0x148>)
 8000978:	885b      	ldrh	r3, [r3, #2]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d13d      	bne.n	80009fa <cool_process+0x132>
				sys = HEAT_VENT;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <cool_process+0x144>)
 8000980:	2203      	movs	r2, #3
 8000982:	801a      	strh	r2, [r3, #0]
}
 8000984:	e039      	b.n	80009fa <cool_process+0x132>
		}else if(sys == HEAT_VENT){
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <cool_process+0x144>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d135      	bne.n	80009fa <cool_process+0x132>
			if(state_vars[G_sw] == OPEN){
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <cool_process+0x148>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d117      	bne.n	80009c6 <cool_process+0xfe>
				hab_timer_c = 0;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <cool_process+0x13c>)
 8000998:	2200      	movs	r2, #0
 800099a:	801a      	strh	r2, [r3, #0]
				cont_c = 0;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <cool_process+0x140>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
				proc_cool = 1;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <cool_process+0x138>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	801a      	strh	r2, [r3, #0]
				sys = HEAT;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <cool_process+0x144>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	801a      	strh	r2, [r3, #0]
				if(proc_heat < 5){
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <cool_process+0x14c>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d821      	bhi.n	80009fa <cool_process+0x132>
					FAN_OFF;
 80009b6:	2390      	movs	r3, #144	; 0x90
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2200      	movs	r2, #0
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 f841 	bl	8001a46 <HAL_GPIO_WritePin>
}
 80009c4:	e019      	b.n	80009fa <cool_process+0x132>
			}else if(state_vars[W_sw] == OPEN){
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <cool_process+0x148>)
 80009c8:	885b      	ldrh	r3, [r3, #2]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d115      	bne.n	80009fa <cool_process+0x132>
				if(EXTGAS_STATUS == OFF){
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	009a      	lsls	r2, r3, #2
 80009d2:	2390      	movs	r3, #144	; 0x90
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 f817 	bl	8001a0c <HAL_GPIO_ReadPin>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d10b      	bne.n	80009fa <cool_process+0x132>
					hab_timer = 0;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <cool_process+0x150>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	801a      	strh	r2, [r3, #0]
					cont = 0;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <cool_process+0x154>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	801a      	strh	r2, [r3, #0]
					proc_heat = 1;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <cool_process+0x14c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	801a      	strh	r2, [r3, #0]
					sys = COOL;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <cool_process+0x144>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	801a      	strh	r2, [r3, #0]
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000002 	.word	0x20000002
 8000a04:	2000004c 	.word	0x2000004c
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	20000044 	.word	0x20000044
 8000a10:	20000004 	.word	0x20000004
 8000a14:	20000000 	.word	0x20000000
 8000a18:	2000004a 	.word	0x2000004a
 8000a1c:	20000046 	.word	0x20000046

08000a20 <heat_process>:

void heat_process(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	switch(proc_heat){
 8000a24:	4b7d      	ldr	r3, [pc, #500]	; (8000c1c <heat_process+0x1fc>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d900      	bls.n	8000a2e <heat_process+0xe>
 8000a2c:	e0ae      	b.n	8000b8c <heat_process+0x16c>
 8000a2e:	009a      	lsls	r2, r3, #2
 8000a30:	4b7b      	ldr	r3, [pc, #492]	; (8000c20 <heat_process+0x200>)
 8000a32:	18d3      	adds	r3, r2, r3
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	469f      	mov	pc, r3
	case 1:
		if(state_vars[VACIO_sw] == OPEN){ // Checkeo sensor de vacio
 8000a38:	4b7a      	ldr	r3, [pc, #488]	; (8000c24 <heat_process+0x204>)
 8000a3a:	891b      	ldrh	r3, [r3, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d000      	beq.n	8000a42 <heat_process+0x22>
 8000a40:	e099      	b.n	8000b76 <heat_process+0x156>
			hab_timer = 1;
 8000a42:	4b79      	ldr	r3, [pc, #484]	; (8000c28 <heat_process+0x208>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a48:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <heat_process+0x20c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
			proc_heat = 2;
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <heat_process+0x1fc>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000a54:	e08f      	b.n	8000b76 <heat_process+0x156>
	case 2:
		if(state_vars[VACIO_sw] == CLOSE){ // Checkeo sensor de vacio
 8000a56:	4b73      	ldr	r3, [pc, #460]	; (8000c24 <heat_process+0x204>)
 8000a58:	891b      	ldrh	r3, [r3, #8]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d108      	bne.n	8000a70 <heat_process+0x50>
			hab_timer = 0;
 8000a5e:	4b72      	ldr	r3, [pc, #456]	; (8000c28 <heat_process+0x208>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a64:	4b71      	ldr	r3, [pc, #452]	; (8000c2c <heat_process+0x20c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	801a      	strh	r2, [r3, #0]
			proc_heat = 1;
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <heat_process+0x1fc>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	801a      	strh	r2, [r3, #0]
		}
		if(cont == 20){ // 10 segundos
 8000a70:	4b6e      	ldr	r3, [pc, #440]	; (8000c2c <heat_process+0x20c>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b14      	cmp	r3, #20
 8000a76:	d000      	beq.n	8000a7a <heat_process+0x5a>
 8000a78:	e07f      	b.n	8000b7a <heat_process+0x15a>
			EXTGAS_ON;
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	0099      	lsls	r1, r3, #2
 8000a7e:	2390      	movs	r3, #144	; 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2201      	movs	r2, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 ffde 	bl	8001a46 <HAL_GPIO_WritePin>
			hab_timer = 0;
 8000a8a:	4b67      	ldr	r3, [pc, #412]	; (8000c28 <heat_process+0x208>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000a90:	4b66      	ldr	r3, [pc, #408]	; (8000c2c <heat_process+0x20c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	801a      	strh	r2, [r3, #0]
			proc_heat = 3;
 8000a96:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <heat_process+0x1fc>)
 8000a98:	2203      	movs	r2, #3
 8000a9a:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000a9c:	e06d      	b.n	8000b7a <heat_process+0x15a>
	case 3:
		if(state_vars[VALV_sw] == CLOSE){ // Espera valvula
 8000a9e:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <heat_process+0x204>)
 8000aa0:	88db      	ldrh	r3, [r3, #6]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d000      	beq.n	8000aa8 <heat_process+0x88>
 8000aa6:	e06a      	b.n	8000b7e <heat_process+0x15e>
			proc_heat = 4;
 8000aa8:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <heat_process+0x1fc>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	801a      	strh	r2, [r3, #0]
			hab_timer = 1;
 8000aae:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <heat_process+0x208>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000ab4:	4b5d      	ldr	r3, [pc, #372]	; (8000c2c <heat_process+0x20c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000aba:	e060      	b.n	8000b7e <heat_process+0x15e>
	case 4:
		if((cont == 40)||(FAN_STATUS == ON)){ // 20 segundos
 8000abc:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <heat_process+0x20c>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	2b28      	cmp	r3, #40	; 0x28
 8000ac2:	d008      	beq.n	8000ad6 <heat_process+0xb6>
 8000ac4:	2390      	movs	r3, #144	; 0x90
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 ff9e 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d155      	bne.n	8000b82 <heat_process+0x162>
			FAN_ON;
 8000ad6:	2390      	movs	r3, #144	; 0x90
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2201      	movs	r2, #1
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 ffb1 	bl	8001a46 <HAL_GPIO_WritePin>
			hab_timer = 0;
 8000ae4:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <heat_process+0x208>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000aea:	4b50      	ldr	r3, [pc, #320]	; (8000c2c <heat_process+0x20c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	801a      	strh	r2, [r3, #0]
			proc_heat = 5;
 8000af0:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <heat_process+0x1fc>)
 8000af2:	2205      	movs	r2, #5
 8000af4:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000af6:	e044      	b.n	8000b82 <heat_process+0x162>
	case 5:
		// Funcionamiento
		break;
	case 6:
		if((cont == 40)||(EXTGAS_STATUS == OFF)){ // 20 segundos
 8000af8:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <heat_process+0x20c>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	2b28      	cmp	r3, #40	; 0x28
 8000afe:	d009      	beq.n	8000b14 <heat_process+0xf4>
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	009a      	lsls	r2, r3, #2
 8000b04:	2390      	movs	r3, #144	; 0x90
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 ff7e 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d138      	bne.n	8000b86 <heat_process+0x166>
			EXTGAS_OFF;
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	0099      	lsls	r1, r3, #2
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 ff91 	bl	8001a46 <HAL_GPIO_WritePin>
			cont = 0;
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <heat_process+0x20c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	801a      	strh	r2, [r3, #0]
			proc_heat = 7;
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <heat_process+0x1fc>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000b30:	e029      	b.n	8000b86 <heat_process+0x166>
	case 7:
		if((cont == 310)||(FAN_STATUS == OFF)){ // 2 min 35 seg
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <heat_process+0x20c>)
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	239b      	movs	r3, #155	; 0x9b
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d007      	beq.n	8000b4e <heat_process+0x12e>
 8000b3e:	2390      	movs	r3, #144	; 0x90
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 ff61 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d11d      	bne.n	8000b8a <heat_process+0x16a>
			FAN_OFF;
 8000b4e:	2390      	movs	r3, #144	; 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2200      	movs	r2, #0
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 ff75 	bl	8001a46 <HAL_GPIO_WritePin>
			hab_timer = 0;
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <heat_process+0x208>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <heat_process+0x20c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
			sys = OFF;
 8000b68:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <heat_process+0x210>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	801a      	strh	r2, [r3, #0]
			proc_heat = 1;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <heat_process+0x1fc>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000b74:	e009      	b.n	8000b8a <heat_process+0x16a>
		break;
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	e008      	b.n	8000b8c <heat_process+0x16c>
		break;
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	e006      	b.n	8000b8c <heat_process+0x16c>
		break;
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e004      	b.n	8000b8c <heat_process+0x16c>
		break;
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	e002      	b.n	8000b8c <heat_process+0x16c>
		break;
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	e000      	b.n	8000b8c <heat_process+0x16c>
		break;
 8000b8a:	46c0      	nop			; (mov r8, r8)
	}

	if(sys != OFF){
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <heat_process+0x210>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d03f      	beq.n	8000c14 <heat_process+0x1f4>
		if((state_vars[W_sw] == OPEN)&&(proc_heat <= 5)&&(state_vars[LIM_sw] == CLOSE)){ // Corta señal
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <heat_process+0x204>)
 8000b96:	885b      	ldrh	r3, [r3, #2]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d110      	bne.n	8000bbe <heat_process+0x19e>
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <heat_process+0x1fc>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d80c      	bhi.n	8000bbe <heat_process+0x19e>
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <heat_process+0x204>)
 8000ba6:	889b      	ldrh	r3, [r3, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <heat_process+0x19e>
			proc_heat = 6;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <heat_process+0x1fc>)
 8000bae:	2206      	movs	r2, #6
 8000bb0:	801a      	strh	r2, [r3, #0]
			hab_timer = 1;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <heat_process+0x208>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <heat_process+0x20c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
		}
		if((state_vars[W_sw] == CLOSE)&&(proc_heat > 5)){ // Vuelve señal antes de terminar anterior
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <heat_process+0x204>)
 8000bc0:	885b      	ldrh	r3, [r3, #2]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d11b      	bne.n	8000bfe <heat_process+0x1de>
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <heat_process+0x1fc>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d917      	bls.n	8000bfe <heat_process+0x1de>
			hab_timer = 0;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <heat_process+0x208>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	801a      	strh	r2, [r3, #0]
			cont = 0;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <heat_process+0x20c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]
			if(EXTGAS_STATUS == ON){
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	009a      	lsls	r2, r3, #2
 8000bde:	2390      	movs	r3, #144	; 0x90
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 ff11 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000bea:	0003      	movs	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d103      	bne.n	8000bf8 <heat_process+0x1d8>
				proc_heat = 5;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <heat_process+0x1fc>)
 8000bf2:	2205      	movs	r2, #5
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	e002      	b.n	8000bfe <heat_process+0x1de>
			}else{
				proc_heat = 1;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <heat_process+0x1fc>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	801a      	strh	r2, [r3, #0]
			}
		}
		if((state_vars[G_sw] == CLOSE)&&(state_vars[LIM_sw] == CLOSE)){
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <heat_process+0x204>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d106      	bne.n	8000c14 <heat_process+0x1f4>
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <heat_process+0x204>)
 8000c08:	889b      	ldrh	r3, [r3, #4]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d102      	bne.n	8000c14 <heat_process+0x1f4>
			sys = HEAT_VENT;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <heat_process+0x210>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	08002854 	.word	0x08002854
 8000c24:	20000004 	.word	0x20000004
 8000c28:	2000004a 	.word	0x2000004a
 8000c2c:	20000046 	.word	0x20000046
 8000c30:	20000044 	.word	0x20000044

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x44>)
 8000c48:	699a      	ldr	r2, [r3, #24]
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x44>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x44>)
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_MspInit+0x44>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0549      	lsls	r1, r1, #21
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	61da      	str	r2, [r3, #28]
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_MspInit+0x44>)
 8000c6e:	69da      	ldr	r2, [r3, #28]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	055b      	lsls	r3, r3, #21
 8000c74:	4013      	ands	r3, r2
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d115      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c9c:	699a      	ldr	r2, [r3, #24]
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0289      	lsls	r1, r1, #10
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000caa:	699a      	ldr	r2, [r3, #24]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2015      	movs	r0, #21
 8000cbc:	f000 f970 	bl	8000fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000cc0:	2015      	movs	r0, #21
 8000cc2:	f000 f982 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40014400 	.word	0x40014400
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f888 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <TIM16_IRQHandler+0x14>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fbac 	bl	800246c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000078 	.word	0x20000078

08000d20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f7ff fff6 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5a:	f001 fd43 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff fa5f 	bl	8000220 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   r0, =_estack
 8000d64:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d70:	080028ac 	.word	0x080028ac
  ldr r2, =_sbss
 8000d74:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d78:	200000e8 	.word	0x200000e8

08000d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>
	...

08000d80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_Init+0x24>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_Init+0x24>)
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f809 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff ff53 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_InitTick+0x5c>)
 8000db2:	681c      	ldr	r4, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x60>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	0019      	movs	r1, r3
 8000dba:	23fa      	movs	r3, #250	; 0xfa
 8000dbc:	0098      	lsls	r0, r3, #2
 8000dbe:	f7ff f9a3 	bl	8000108 <__udivsi3>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f7ff f99e 	bl	8000108 <__udivsi3>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 f90b 	bl	8000fea <HAL_SYSTICK_Config>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e00f      	b.n	8000dfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d80b      	bhi.n	8000dfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2301      	movs	r3, #1
 8000de6:	425b      	negs	r3, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f8d8 	bl	8000fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_InitTick+0x64>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	2000001c 	.word	0x2000001c
 8000e08:	20000024 	.word	0x20000024
 8000e0c:	20000020 	.word	0x20000020

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	001a      	movs	r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x20>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	18d2      	adds	r2, r2, r3
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_IncTick+0x20>)
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000024 	.word	0x20000024
 8000e30:	200000c0 	.word	0x200000c0

08000e34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <HAL_GetTick+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	200000c0 	.word	0x200000c0

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5a:	d809      	bhi.n	8000e70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	001a      	movs	r2, r3
 8000e62:	231f      	movs	r3, #31
 8000e64:	401a      	ands	r2, r3
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_EnableIRQ+0x30>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4091      	lsls	r1, r2
 8000e6c:	000a      	movs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
  }
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e90:	d828      	bhi.n	8000ee4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e92:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <__NVIC_SetPriority+0xd4>)
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	33c0      	adds	r3, #192	; 0xc0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	589b      	ldr	r3, [r3, r2]
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	400a      	ands	r2, r1
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	21ff      	movs	r1, #255	; 0xff
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	019b      	lsls	r3, r3, #6
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	2303      	movs	r3, #3
 8000eca:	4003      	ands	r3, r0
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	481f      	ldr	r0, [pc, #124]	; (8000f50 <__NVIC_SetPriority+0xd4>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	430a      	orrs	r2, r1
 8000edc:	33c0      	adds	r3, #192	; 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ee2:	e031      	b.n	8000f48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <__NVIC_SetPriority+0xd8>)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0019      	movs	r1, r3
 8000eec:	230f      	movs	r3, #15
 8000eee:	400b      	ands	r3, r1
 8000ef0:	3b08      	subs	r3, #8
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	3304      	adds	r3, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	0011      	movs	r1, r2
 8000f04:	2203      	movs	r2, #3
 8000f06:	400a      	ands	r2, r1
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	21ff      	movs	r1, #255	; 0xff
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	401a      	ands	r2, r3
 8000f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	2303      	movs	r3, #3
 8000f26:	4003      	ands	r3, r0
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <__NVIC_SetPriority+0xd8>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	001c      	movs	r4, r3
 8000f34:	230f      	movs	r3, #15
 8000f36:	4023      	ands	r3, r4
 8000f38:	3b08      	subs	r3, #8
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	3306      	adds	r3, #6
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	18c3      	adds	r3, r0, r3
 8000f44:	3304      	adds	r3, #4
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1e5a      	subs	r2, r3, #1
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	045b      	lsls	r3, r3, #17
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d301      	bcc.n	8000f70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e010      	b.n	8000f92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <SysTick_Config+0x44>)
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	3a01      	subs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f78:	2301      	movs	r3, #1
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff ff7c 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x44>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x44>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	210f      	movs	r1, #15
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	1c02      	adds	r2, r0, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff33 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ffaf 	bl	8000f58 <SysTick_Config>
 8000ffa:	0003      	movs	r3, r0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	4013      	ands	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_FLASH_Unlock+0x44>)
 800101e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_FLASH_Unlock+0x48>)
 8001024:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	4013      	ands	r3, r2
 800102e:	d002      	beq.n	8001036 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	40022000 	.word	0x40022000
 8001048:	45670123 	.word	0x45670123
 800104c:	cdef89ab 	.word	0xcdef89ab

08001050 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_FLASH_OB_Unlock+0x28>)
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4013      	ands	r3, r2
 800105e:	d107      	bne.n	8001070 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_FLASH_OB_Unlock+0x28>)
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_FLASH_OB_Unlock+0x2c>)
 8001064:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_FLASH_OB_Unlock+0x28>)
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_FLASH_OB_Unlock+0x30>)
 800106a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800106c:	2300      	movs	r3, #0
 800106e:	e000      	b.n	8001072 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40022000 	.word	0x40022000
 800107c:	45670123 	.word	0x45670123
 8001080:	cdef89ab 	.word	0xcdef89ab

08001084 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_FLASH_OB_Launch+0x24>)
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_FLASH_OB_Launch+0x24>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0189      	lsls	r1, r1, #6
 8001092:	430a      	orrs	r2, r1
 8001094:	611a      	str	r2, [r3, #16]
  
  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_FLASH_OB_Launch+0x28>)
 8001098:	0018      	movs	r0, r3
 800109a:	f000 f809 	bl	80010b0 <FLASH_WaitForLastOperation>
 800109e:	0003      	movs	r3, r0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40022000 	.word	0x40022000
 80010ac:	0000c350 	.word	0x0000c350

080010b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff febc 	bl	8000e34 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010c0:	e00f      	b.n	80010e2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3301      	adds	r3, #1
 80010c6:	d00c      	beq.n	80010e2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <FLASH_WaitForLastOperation+0x2e>
 80010ce:	f7ff feb1 	bl	8000e34 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d201      	bcs.n	80010e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e01f      	b.n	8001122 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <FLASH_WaitForLastOperation+0x7c>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d0e9      	beq.n	80010c2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <FLASH_WaitForLastOperation+0x7c>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2220      	movs	r2, #32
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b20      	cmp	r3, #32
 80010f8:	d102      	bne.n	8001100 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <FLASH_WaitForLastOperation+0x7c>)
 80010fc:	2220      	movs	r2, #32
 80010fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <FLASH_WaitForLastOperation+0x7c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2210      	movs	r2, #16
 8001106:	4013      	ands	r3, r2
 8001108:	2b10      	cmp	r3, #16
 800110a:	d005      	beq.n	8001118 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <FLASH_WaitForLastOperation+0x7c>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2204      	movs	r2, #4
 8001112:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001114:	2b04      	cmp	r3, #4
 8001116:	d103      	bne.n	8001120 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001118:	f000 f80a 	bl	8001130 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	40022000 	.word	0x40022000

08001130 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <FLASH_SetErrorCode+0x58>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2210      	movs	r2, #16
 8001140:	4013      	ands	r3, r2
 8001142:	2b10      	cmp	r3, #16
 8001144:	d109      	bne.n	800115a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <FLASH_SetErrorCode+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2202      	movs	r2, #2
 800114c:	431a      	orrs	r2, r3
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <FLASH_SetErrorCode+0x5c>)
 8001150:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2210      	movs	r2, #16
 8001156:	4313      	orrs	r3, r2
 8001158:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <FLASH_SetErrorCode+0x58>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2204      	movs	r2, #4
 8001160:	4013      	ands	r3, r2
 8001162:	2b04      	cmp	r3, #4
 8001164:	d109      	bne.n	800117a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <FLASH_SetErrorCode+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	2201      	movs	r2, #1
 800116c:	431a      	orrs	r2, r3
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <FLASH_SetErrorCode+0x5c>)
 8001170:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2204      	movs	r2, #4
 8001176:	4313      	orrs	r3, r2
 8001178:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <FLASH_SetErrorCode+0x58>)
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]
}  
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40022000 	.word	0x40022000
 800118c:	200000c8 	.word	0x200000c8

08001190 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8001196:	1dbb      	adds	r3, r7, #6
 8001198:	22aa      	movs	r2, #170	; 0xaa
 800119a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 80011a2:	f000 faa3 	bl	80016ec <FLASH_OB_GetRDP>
 80011a6:	0002      	movs	r2, r0
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011ac:	1dfc      	adds	r4, r7, #7
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_FLASHEx_OBErase+0x90>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff7d 	bl	80010b0 <FLASH_WaitForLastOperation>
 80011b6:	0003      	movs	r3, r0
 80011b8:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d127      	bne.n	8001212 <HAL_FLASHEx_OBErase+0x82>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_FLASHEx_OBErase+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_FLASHEx_OBErase+0x98>)
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_FLASHEx_OBErase+0x98>)
 80011ce:	2120      	movs	r1, #32
 80011d0:	430a      	orrs	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_FLASHEx_OBErase+0x98>)
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_FLASHEx_OBErase+0x98>)
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	430a      	orrs	r2, r1
 80011de:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011e0:	1dfc      	adds	r4, r7, #7
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_FLASHEx_OBErase+0x90>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff63 	bl	80010b0 <FLASH_WaitForLastOperation>
 80011ea:	0003      	movs	r3, r0
 80011ec:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_FLASHEx_OBErase+0x98>)
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_FLASHEx_OBErase+0x98>)
 80011f4:	2120      	movs	r1, #32
 80011f6:	438a      	bics	r2, r1
 80011f8:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <HAL_FLASHEx_OBErase+0x82>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8001202:	1dfc      	adds	r4, r7, #7
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f981 	bl	8001510 <FLASH_OB_RDP_LevelConfig>
 800120e:	0003      	movs	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Return the erase status */
  return status;
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b003      	add	sp, #12
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	0000c350 	.word	0x0000c350
 8001224:	200000c8 	.word	0x200000c8
 8001228:	40022000 	.word	0x40022000

0800122c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 800123e:	7e1b      	ldrb	r3, [r3, #24]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_FLASHEx_OBProgram+0x1c>
 8001244:	2302      	movs	r3, #2
 8001246:	e07d      	b.n	8001344 <HAL_FLASHEx_OBProgram+0x118>
 8001248:	4b40      	ldr	r3, [pc, #256]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 800124a:	2201      	movs	r2, #1
 800124c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	4013      	ands	r3, r2
 8001256:	d021      	beq.n	800129c <HAL_FLASHEx_OBProgram+0x70>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d109      	bne.n	8001274 <HAL_FLASHEx_OBProgram+0x48>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	220f      	movs	r2, #15
 8001266:	18bc      	adds	r4, r7, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f000 f88d 	bl	8001388 <FLASH_OB_EnableWRP>
 800126e:	0003      	movs	r3, r0
 8001270:	7023      	strb	r3, [r4, #0]
 8001272:	e008      	b.n	8001286 <HAL_FLASHEx_OBProgram+0x5a>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	220f      	movs	r2, #15
 800127a:	18bc      	adds	r4, r7, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f8e5 	bl	800144c <FLASH_OB_DisableWRP>
 8001282:	0003      	movs	r3, r0
 8001284:	7023      	strb	r3, [r4, #0]
    }
    if (status != HAL_OK)
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_FLASHEx_OBProgram+0x70>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 8001292:	2200      	movs	r2, #0
 8001294:	761a      	strb	r2, [r3, #24]
      return status;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	e053      	b.n	8001344 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_FLASHEx_OBProgram+0xa2>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b1b      	ldrb	r3, [r3, #12]
 80012aa:	250f      	movs	r5, #15
 80012ac:	197c      	adds	r4, r7, r5
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f92e 	bl	8001510 <FLASH_OB_RDP_LevelConfig>
 80012b4:	0003      	movs	r3, r0
 80012b6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 80012b8:	0029      	movs	r1, r5
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	761a      	strb	r2, [r3, #24]
      return status;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e03a      	b.n	8001344 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2204      	movs	r2, #4
 80012d4:	4013      	ands	r3, r2
 80012d6:	d013      	beq.n	8001300 <HAL_FLASHEx_OBProgram+0xd4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7b5b      	ldrb	r3, [r3, #13]
 80012dc:	250f      	movs	r5, #15
 80012de:	197c      	adds	r4, r7, r5
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 f975 	bl	80015d0 <FLASH_OB_UserConfig>
 80012e6:	0003      	movs	r3, r0
 80012e8:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 80012ea:	0029      	movs	r1, r5
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_FLASHEx_OBProgram+0xd4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	761a      	strb	r2, [r3, #24]
      return status;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e021      	b.n	8001344 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2208      	movs	r2, #8
 8001306:	4013      	ands	r3, r2
 8001308:	d016      	beq.n	8001338 <HAL_FLASHEx_OBProgram+0x10c>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7d1b      	ldrb	r3, [r3, #20]
 8001312:	250f      	movs	r5, #15
 8001314:	197c      	adds	r4, r7, r5
 8001316:	0019      	movs	r1, r3
 8001318:	0010      	movs	r0, r2
 800131a:	f000 f99d 	bl	8001658 <FLASH_OB_ProgramData>
 800131e:	0003      	movs	r3, r0
 8001320:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8001322:	0029      	movs	r1, r5
 8001324:	187b      	adds	r3, r7, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_FLASHEx_OBProgram+0x10c>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 800132e:	2200      	movs	r2, #0
 8001330:	761a      	strb	r2, [r3, #24]
      return status;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	e005      	b.n	8001344 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <HAL_FLASHEx_OBProgram+0x120>)
 800133a:	2200      	movs	r2, #0
 800133c:	761a      	strb	r2, [r3, #24]

  return status;
 800133e:	230f      	movs	r3, #15
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	781b      	ldrb	r3, [r3, #0]
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bdb0      	pop	{r4, r5, r7, pc}
 800134c:	200000c8 	.word	0x200000c8

08001350 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2207      	movs	r2, #7
 800135c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 800135e:	f000 f9bb 	bl	80016d8 <FLASH_OB_GetWRP>
 8001362:	0002      	movs	r2, r0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001368:	f000 f9c0 	bl	80016ec <FLASH_OB_GetRDP>
 800136c:	0003      	movs	r3, r0
 800136e:	b2da      	uxtb	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	731a      	strb	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001374:	f000 f9d4 	bl	8001720 <FLASH_OB_GetUser>
 8001378:	0003      	movs	r3, r0
 800137a:	001a      	movs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	735a      	strb	r2, [r3, #13]
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001390:	240f      	movs	r4, #15
 8001392:	193b      	adds	r3, r7, r4
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8001398:	260c      	movs	r6, #12
 800139a:	19bb      	adds	r3, r7, r6
 800139c:	2201      	movs	r2, #1
 800139e:	4252      	negs	r2, r2
 80013a0:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 80013a2:	f000 f999 	bl	80016d8 <FLASH_OB_GetWRP>
 80013a6:	0002      	movs	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	19bb      	adds	r3, r7, r6
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	400a      	ands	r2, r1
 80013ba:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES48TO63MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013bc:	0025      	movs	r5, r4
 80013be:	193c      	adds	r4, r7, r4
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <FLASH_OB_EnableWRP+0xb4>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7ff fe74 	bl	80010b0 <FLASH_WaitForLastOperation>
 80013c8:	0003      	movs	r3, r0
 80013ca:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d12c      	bne.n	800142e <FLASH_OB_EnableWRP+0xa6>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <FLASH_OB_EnableWRP+0xb8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80013da:	197c      	adds	r4, r7, r5
 80013dc:	f7ff fed8 	bl	8001190 <HAL_FLASHEx_OBErase>
 80013e0:	0003      	movs	r3, r0
 80013e2:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80013e4:	0028      	movs	r0, r5
 80013e6:	197b      	adds	r3, r7, r5
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11f      	bne.n	800142e <FLASH_OB_EnableWRP+0xa6>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <FLASH_OB_EnableWRP+0xbc>)
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <FLASH_OB_EnableWRP+0xbc>)
 80013f4:	2110      	movs	r1, #16
 80013f6:	430a      	orrs	r2, r1
 80013f8:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80013fa:	19bb      	adds	r3, r7, r6
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d00f      	beq.n	8001422 <FLASH_OB_EnableWRP+0x9a>
      {
        OB->WRP0 &= WRP0_Data;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <FLASH_OB_EnableWRP+0xc0>)
 8001404:	891b      	ldrh	r3, [r3, #8]
 8001406:	b29b      	uxth	r3, r3
 8001408:	490f      	ldr	r1, [pc, #60]	; (8001448 <FLASH_OB_EnableWRP+0xc0>)
 800140a:	19ba      	adds	r2, r7, r6
 800140c:	8812      	ldrh	r2, [r2, #0]
 800140e:	4013      	ands	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001414:	183c      	adds	r4, r7, r0
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <FLASH_OB_EnableWRP+0xb4>)
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fe49 	bl	80010b0 <FLASH_WaitForLastOperation>
 800141e:	0003      	movs	r3, r0
 8001420:	7023      	strb	r3, [r4, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <FLASH_OB_EnableWRP+0xbc>)
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <FLASH_OB_EnableWRP+0xbc>)
 8001428:	2110      	movs	r1, #16
 800142a:	438a      	bics	r2, r1
 800142c:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 800142e:	230f      	movs	r3, #15
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b005      	add	sp, #20
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143c:	0000c350 	.word	0x0000c350
 8001440:	200000c8 	.word	0x200000c8
 8001444:	40022000 	.word	0x40022000
 8001448:	1ffff800 	.word	0x1ffff800

0800144c <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001454:	240f      	movs	r4, #15
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 800145c:	260c      	movs	r6, #12
 800145e:	19bb      	adds	r3, r7, r6
 8001460:	2201      	movs	r2, #1
 8001462:	4252      	negs	r2, r2
 8001464:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001466:	f000 f937 	bl	80016d8 <FLASH_OB_GetWRP>
 800146a:	0002      	movs	r2, r0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4313      	orrs	r3, r2
 8001470:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	b29a      	uxth	r2, r3
 8001476:	19bb      	adds	r3, r7, r6
 8001478:	21ff      	movs	r1, #255	; 0xff
 800147a:	400a      	ands	r2, r1
 800147c:	801a      	strh	r2, [r3, #0]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES48TO63MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800147e:	0025      	movs	r5, r4
 8001480:	193c      	adds	r4, r7, r4
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <FLASH_OB_DisableWRP+0xb4>)
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fe13 	bl	80010b0 <FLASH_WaitForLastOperation>
 800148a:	0003      	movs	r3, r0
 800148c:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 800148e:	197b      	adds	r3, r7, r5
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d12c      	bne.n	80014f0 <FLASH_OB_DisableWRP+0xa4>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <FLASH_OB_DisableWRP+0xb8>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 800149c:	197c      	adds	r4, r7, r5
 800149e:	f7ff fe77 	bl	8001190 <HAL_FLASHEx_OBErase>
 80014a2:	0003      	movs	r3, r0
 80014a4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80014a6:	0028      	movs	r0, r5
 80014a8:	197b      	adds	r3, r7, r5
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11f      	bne.n	80014f0 <FLASH_OB_DisableWRP+0xa4>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <FLASH_OB_DisableWRP+0xbc>)
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <FLASH_OB_DisableWRP+0xbc>)
 80014b6:	2110      	movs	r1, #16
 80014b8:	430a      	orrs	r2, r1
 80014ba:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80014bc:	19bb      	adds	r3, r7, r6
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2bff      	cmp	r3, #255	; 0xff
 80014c2:	d00f      	beq.n	80014e4 <FLASH_OB_DisableWRP+0x98>
      {
        OB->WRP0 &= WRP0_Data;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <FLASH_OB_DisableWRP+0xc0>)
 80014c6:	891b      	ldrh	r3, [r3, #8]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4910      	ldr	r1, [pc, #64]	; (800150c <FLASH_OB_DisableWRP+0xc0>)
 80014cc:	19ba      	adds	r2, r7, r6
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	4013      	ands	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014d6:	183c      	adds	r4, r7, r0
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <FLASH_OB_DisableWRP+0xb4>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff fde8 	bl	80010b0 <FLASH_WaitForLastOperation>
 80014e0:	0003      	movs	r3, r0
 80014e2:	7023      	strb	r3, [r4, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <FLASH_OB_DisableWRP+0xbc>)
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <FLASH_OB_DisableWRP+0xbc>)
 80014ea:	2110      	movs	r1, #16
 80014ec:	438a      	bics	r2, r1
 80014ee:	611a      	str	r2, [r3, #16]
    }
  }
  return status;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b005      	add	sp, #20
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	0000c350 	.word	0x0000c350
 8001504:	200000c8 	.word	0x200000c8
 8001508:	40022000 	.word	0x40022000
 800150c:	1ffff800 	.word	0x1ffff800

08001510 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note   Warning: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	0002      	movs	r2, r0
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	250f      	movs	r5, #15
 800151e:	197b      	adds	r3, r7, r5
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001524:	197c      	adds	r4, r7, r5
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <FLASH_OB_RDP_LevelConfig+0xb0>)
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fdc1 	bl	80010b0 <FLASH_WaitForLastOperation>
 800152e:	0003      	movs	r3, r0
 8001530:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001532:	0028      	movs	r0, r5
 8001534:	183b      	adds	r3, r7, r0
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d139      	bne.n	80015b0 <FLASH_OB_RDP_LevelConfig+0xa0>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <FLASH_OB_RDP_LevelConfig+0xb4>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001548:	2120      	movs	r1, #32
 800154a:	430a      	orrs	r2, r1
 800154c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	430a      	orrs	r2, r1
 8001558:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800155a:	0005      	movs	r5, r0
 800155c:	183c      	adds	r4, r7, r0
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <FLASH_OB_RDP_LevelConfig+0xb0>)
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fda5 	bl	80010b0 <FLASH_WaitForLastOperation>
 8001566:	0003      	movs	r3, r0
 8001568:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001570:	2120      	movs	r1, #32
 8001572:	438a      	bics	r2, r1
 8001574:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 8001576:	0028      	movs	r0, r5
 8001578:	183b      	adds	r3, r7, r0
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d117      	bne.n	80015b0 <FLASH_OB_RDP_LevelConfig+0xa0>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001586:	2110      	movs	r1, #16
 8001588:	430a      	orrs	r2, r1
 800158a:	611a      	str	r2, [r3, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <FLASH_OB_RDP_LevelConfig+0xbc>)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	8013      	strh	r3, [r2, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8001596:	183c      	adds	r4, r7, r0
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <FLASH_OB_RDP_LevelConfig+0xb0>)
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fd88 	bl	80010b0 <FLASH_WaitForLastOperation>
 80015a0:	0003      	movs	r3, r0
 80015a2:	7023      	strb	r3, [r4, #0]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <FLASH_OB_RDP_LevelConfig+0xb8>)
 80015aa:	2110      	movs	r1, #16
 80015ac:	438a      	bics	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 80015b0:	230f      	movs	r3, #15
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	781b      	ldrb	r3, [r3, #0]
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	0000c350 	.word	0x0000c350
 80015c4:	200000c8 	.word	0x200000c8
 80015c8:	40022000 	.word	0x40022000
 80015cc:	1ffff800 	.word	0x1ffff800

080015d0 <FLASH_OB_UserConfig>:
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	250f      	movs	r5, #15
 80015de:	197b      	adds	r3, r7, r5
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_OB_BOOT_SEL((UserConfig&OB_BOOT_SEL_SET)));
  assert_param(IS_OB_BOOT0((UserConfig&OB_BOOT0_SET)));
#endif /* FLASH_OBR_BOOT_SEL */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015e4:	197c      	adds	r4, r7, r5
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <FLASH_OB_UserConfig+0x78>)
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fd61 	bl	80010b0 <FLASH_WaitForLastOperation>
 80015ee:	0003      	movs	r3, r0
 80015f0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80015f2:	0028      	movs	r0, r5
 80015f4:	183b      	adds	r3, r7, r0
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d11e      	bne.n	800163a <FLASH_OB_UserConfig+0x6a>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <FLASH_OB_UserConfig+0x7c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <FLASH_OB_UserConfig+0x80>)
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <FLASH_OB_UserConfig+0x80>)
 8001608:	2110      	movs	r1, #16
 800160a:	430a      	orrs	r2, r1
 800160c:	611a      	str	r2, [r3, #16]
 
#if defined(FLASH_OBR_BOOT_SEL)
    OB->USER = UserConfig;
#else
    OB->USER = (UserConfig | 0x88U);
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2278      	movs	r2, #120	; 0x78
 8001614:	4252      	negs	r2, r2
 8001616:	4313      	orrs	r3, r2
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <FLASH_OB_UserConfig+0x84>)
 800161c:	b292      	uxth	r2, r2
 800161e:	805a      	strh	r2, [r3, #2]
#endif

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001620:	183c      	adds	r4, r7, r0
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <FLASH_OB_UserConfig+0x78>)
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fd43 	bl	80010b0 <FLASH_WaitForLastOperation>
 800162a:	0003      	movs	r3, r0
 800162c:	7023      	strb	r3, [r4, #0]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <FLASH_OB_UserConfig+0x80>)
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <FLASH_OB_UserConfig+0x80>)
 8001634:	2110      	movs	r1, #16
 8001636:	438a      	bics	r2, r1
 8001638:	611a      	str	r2, [r3, #16]
  }
  
  return status; 
 800163a:	230f      	movs	r3, #15
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	781b      	ldrb	r3, [r3, #0]
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b004      	add	sp, #16
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	0000c350 	.word	0x0000c350
 800164c:	200000c8 	.word	0x200000c8
 8001650:	40022000 	.word	0x40022000
 8001654:	1ffff800 	.word	0x1ffff800

08001658 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	000a      	movs	r2, r1
 8001662:	1cfb      	adds	r3, r7, #3
 8001664:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001666:	250f      	movs	r5, #15
 8001668:	197b      	adds	r3, r7, r5
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800166e:	197c      	adds	r4, r7, r5
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <FLASH_OB_ProgramData+0x74>)
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff fd1c 	bl	80010b0 <FLASH_WaitForLastOperation>
 8001678:	0003      	movs	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800167c:	0028      	movs	r0, r5
 800167e:	183b      	adds	r3, r7, r0
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d11a      	bne.n	80016bc <FLASH_OB_ProgramData+0x64>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <FLASH_OB_ProgramData+0x78>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <FLASH_OB_ProgramData+0x7c>)
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <FLASH_OB_ProgramData+0x7c>)
 8001692:	2110      	movs	r1, #16
 8001694:	430a      	orrs	r2, r1
 8001696:	611a      	str	r2, [r3, #16]
    *(__IO uint16_t*)Address = Data;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	1cfa      	adds	r2, r7, #3
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	b292      	uxth	r2, r2
 80016a0:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a2:	183c      	adds	r4, r7, r0
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <FLASH_OB_ProgramData+0x74>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fd02 	bl	80010b0 <FLASH_WaitForLastOperation>
 80016ac:	0003      	movs	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <FLASH_OB_ProgramData+0x7c>)
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <FLASH_OB_ProgramData+0x7c>)
 80016b6:	2110      	movs	r1, #16
 80016b8:	438a      	bics	r2, r1
 80016ba:	611a      	str	r2, [r3, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b004      	add	sp, #16
 80016c8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	0000c350 	.word	0x0000c350
 80016d0:	200000c8 	.word	0x200000c8
 80016d4:	40022000 	.word	0x40022000

080016d8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <FLASH_OB_GetWRP+0x10>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40022000 	.word	0x40022000

080016ec <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  uint32_t tmp_reg;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <FLASH_OB_GetRDP+0x30>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2206      	movs	r2, #6
 80016f8:	4013      	ands	r3, r2
 80016fa:	607b      	str	r3, [r7, #4]

  if (tmp_reg == 0U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <FLASH_OB_GetRDP+0x1a>
  {
    return OB_RDP_LEVEL_0;
 8001702:	23aa      	movs	r3, #170	; 0xaa
 8001704:	e006      	b.n	8001714 <FLASH_OB_GetRDP+0x28>
  }
  else if ((tmp_reg & FLASH_OBR_RDPRT2) == FLASH_OBR_RDPRT2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2204      	movs	r2, #4
 800170a:	4013      	ands	r3, r2
 800170c:	d001      	beq.n	8001712 <FLASH_OB_GetRDP+0x26>
  {
    return OB_RDP_LEVEL_2;
 800170e:	23cc      	movs	r3, #204	; 0xcc
 8001710:	e000      	b.n	8001714 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    return OB_RDP_LEVEL_1;
 8001712:	23bb      	movs	r3, #187	; 0xbb
  }
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40022000 	.word	0x40022000

08001720 <FLASH_OB_GetUser>:
  * @retval  The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1), RST_STDBY(Bit2), nBOOT1(Bit4),
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <FLASH_OB_GetUser+0x18>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2277      	movs	r2, #119	; 0x77
 800172e:	4013      	ands	r3, r2
 8001730:	b2db      	uxtb	r3, r3
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e149      	b.n	80019e0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <HAL_GPIO_Init+0x28>
 8001762:	e13a      	b.n	80019da <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	2201      	movs	r2, #1
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	58d3      	ldr	r3, [r2, r3]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2207      	movs	r2, #7
 8001838:	4013      	ands	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	43da      	mvns	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2107      	movs	r1, #7
 8001852:	400b      	ands	r3, r1
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	6939      	ldr	r1, [r7, #16]
 800186c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	401a      	ands	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	23c0      	movs	r3, #192	; 0xc0
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d100      	bne.n	80018b0 <HAL_GPIO_Init+0x174>
 80018ae:	e094      	b.n	80019da <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x2c0>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	589b      	ldr	r3, [r3, r2]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	43da      	mvns	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	2390      	movs	r3, #144	; 0x90
 80018f0:	05db      	lsls	r3, r3, #23
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x1d6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a41      	ldr	r2, [pc, #260]	; (8001a00 <HAL_GPIO_Init+0x2c4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x1d2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <HAL_GPIO_Init+0x2c8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x1ce>
 8001906:	2302      	movs	r3, #2
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x1d8>
 800190a:	2305      	movs	r3, #5
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x1d8>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x1d8>
 8001912:	2300      	movs	r3, #0
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	2103      	movs	r1, #3
 8001918:	400a      	ands	r2, r1
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x2c0>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	035b      	lsls	r3, r3, #13
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	039b      	lsls	r3, r3, #14
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	40da      	lsrs	r2, r3
 80019e8:	1e13      	subs	r3, r2, #0
 80019ea:	d000      	beq.n	80019ee <HAL_GPIO_Init+0x2b2>
 80019ec:	e6ae      	b.n	800174c <HAL_GPIO_Init+0x10>
  } 
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	48000800 	.word	0x48000800
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	000a      	movs	r2, r1
 8001a16:	1cbb      	adds	r3, r7, #2
 8001a18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	1cba      	adds	r2, r7, #2
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	4013      	ands	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a26:	230f      	movs	r3, #15
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
  }
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	0008      	movs	r0, r1
 8001a50:	0011      	movs	r1, r2
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	1c02      	adds	r2, r0, #0
 8001a56:	801a      	strh	r2, [r3, #0]
 8001a58:	1c7b      	adds	r3, r7, #1
 8001a5a:	1c0a      	adds	r2, r1, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5e:	1c7b      	adds	r3, r7, #1
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a66:	1cbb      	adds	r3, r7, #2
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	000a      	movs	r2, r1
 8001a8a:	1cbb      	adds	r3, r7, #2
 8001a8c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a94:	1cbb      	adds	r3, r7, #2
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	1cb9      	adds	r1, r7, #2
 8001aa4:	8809      	ldrh	r1, [r1, #0]
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b004      	add	sp, #16
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e301      	b.n	80020ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x1e>
 8001ad4:	e08d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ad6:	4bc3      	ldr	r3, [pc, #780]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	220c      	movs	r2, #12
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d00e      	beq.n	8001b00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae2:	4bc0      	ldr	r3, [pc, #768]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x64>
 8001aee:	4bbd      	ldr	r3, [pc, #756]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	025b      	lsls	r3, r3, #9
 8001af6:	401a      	ands	r2, r3
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	025b      	lsls	r3, r3, #9
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10d      	bne.n	8001b1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4bb8      	ldr	r3, [pc, #736]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	029b      	lsls	r3, r3, #10
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <HAL_RCC_OscConfig+0x56>
 8001b0c:	e070      	b.n	8001bf0 <HAL_RCC_OscConfig+0x138>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d000      	beq.n	8001b18 <HAL_RCC_OscConfig+0x60>
 8001b16:	e06b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e2d8      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0x7c>
 8001b24:	4baf      	ldr	r3, [pc, #700]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4bae      	ldr	r3, [pc, #696]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	0249      	lsls	r1, r1, #9
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e02f      	b.n	8001b94 <HAL_RCC_OscConfig+0xdc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x9e>
 8001b3c:	4ba9      	ldr	r3, [pc, #676]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4ba8      	ldr	r3, [pc, #672]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	49a9      	ldr	r1, [pc, #676]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4ba6      	ldr	r3, [pc, #664]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4ba5      	ldr	r3, [pc, #660]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	49a7      	ldr	r1, [pc, #668]	; (8001dec <HAL_RCC_OscConfig+0x334>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e01e      	b.n	8001b94 <HAL_RCC_OscConfig+0xdc>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0xc4>
 8001b5e:	4ba1      	ldr	r3, [pc, #644]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4ba0      	ldr	r3, [pc, #640]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	02c9      	lsls	r1, r1, #11
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	4b9d      	ldr	r3, [pc, #628]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b9c      	ldr	r3, [pc, #624]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0249      	lsls	r1, r1, #9
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xdc>
 8001b7c:	4b99      	ldr	r3, [pc, #612]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b98      	ldr	r3, [pc, #608]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	4999      	ldr	r1, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4b96      	ldr	r3, [pc, #600]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b95      	ldr	r3, [pc, #596]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	4997      	ldr	r1, [pc, #604]	; (8001dec <HAL_RCC_OscConfig+0x334>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d014      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f94a 	bl	8000e34 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba6:	f7ff f945 	bl	8000e34 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	; 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e28a      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb8:	4b8a      	ldr	r3, [pc, #552]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0xee>
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f935 	bl	8000e34 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f930 	bl	8000e34 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e275      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	029b      	lsls	r3, r3, #10
 8001bea:	4013      	ands	r3, r2
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x118>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x146>
 8001bfc:	e069      	b.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bfe:	4b79      	ldr	r3, [pc, #484]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	220c      	movs	r2, #12
 8001c04:	4013      	ands	r3, r2
 8001c06:	d00b      	beq.n	8001c20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c08:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d11c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x196>
 8001c14:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d116      	bne.n	8001c4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x17e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e24b      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b6b      	ldr	r3, [pc, #428]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	22f8      	movs	r2, #248	; 0xf8
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00da      	lsls	r2, r3, #3
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4c:	e041      	b.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d024      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b62      	ldr	r3, [pc, #392]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff f8e7 	bl	8000e34 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f8e2 	bl	8000e34 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e227      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2202      	movs	r2, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d0f1      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	22f8      	movs	r2, #248	; 0xf8
 8001c8e:	4393      	bics	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00da      	lsls	r2, r3, #3
 8001c98:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	438a      	bics	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f8c2 	bl	8000e34 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f8bd 	bl	8000e34 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e202      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc8:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f1      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d036      	beq.n	8001d4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d019      	beq.n	8001d18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f8a0 	bl	8000e34 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f89b 	bl	8000e34 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1e0      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0f1      	beq.n	8001cfa <HAL_RCC_OscConfig+0x242>
 8001d16:	e018      	b.n	8001d4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f886 	bl	8000e34 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f881 	bl	8000e34 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1c6      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1f1      	bne.n	8001d2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x29e>
 8001d54:	e0b4      	b.n	8001ec0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	201f      	movs	r0, #31
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	4013      	ands	r3, r2
 8001d68:	d110      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0549      	lsls	r1, r1, #21
 8001d74:	430a      	orrs	r2, r1
 8001d76:	61da      	str	r2, [r3, #28]
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d86:	183b      	adds	r3, r7, r0
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4013      	ands	r3, r2
 8001d96:	d11a      	bne.n	8001dce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	0049      	lsls	r1, r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7ff f845 	bl	8000e34 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db0:	f7ff f840 	bl	8000e34 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e185      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10e      	bne.n	8001df4 <HAL_RCC_OscConfig+0x33c>
 8001dd6:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	621a      	str	r2, [r3, #32]
 8001de2:	e035      	b.n	8001e50 <HAL_RCC_OscConfig+0x398>
 8001de4:	40021000 	.word	0x40021000
 8001de8:	fffeffff 	.word	0xfffeffff
 8001dec:	fffbffff 	.word	0xfffbffff
 8001df0:	40007000 	.word	0x40007000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x35e>
 8001dfc:	4bb6      	ldr	r3, [pc, #728]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	4bb5      	ldr	r3, [pc, #724]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	621a      	str	r2, [r3, #32]
 8001e08:	4bb3      	ldr	r3, [pc, #716]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	4bb2      	ldr	r3, [pc, #712]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	2104      	movs	r1, #4
 8001e10:	438a      	bics	r2, r1
 8001e12:	621a      	str	r2, [r3, #32]
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x398>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x380>
 8001e1e:	4bae      	ldr	r3, [pc, #696]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e20:	6a1a      	ldr	r2, [r3, #32]
 8001e22:	4bad      	ldr	r3, [pc, #692]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e24:	2104      	movs	r1, #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	621a      	str	r2, [r3, #32]
 8001e2a:	4bab      	ldr	r3, [pc, #684]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	4baa      	ldr	r3, [pc, #680]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	621a      	str	r2, [r3, #32]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x398>
 8001e38:	4ba7      	ldr	r3, [pc, #668]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	4ba6      	ldr	r3, [pc, #664]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	621a      	str	r2, [r3, #32]
 8001e44:	4ba4      	ldr	r3, [pc, #656]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	4ba3      	ldr	r3, [pc, #652]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d014      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe ffec 	bl	8000e34 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe ffe7 	bl	8000e34 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a9b      	ldr	r2, [pc, #620]	; (80020dc <HAL_RCC_OscConfig+0x624>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e12b      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b98      	ldr	r3, [pc, #608]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
 8001e80:	e013      	b.n	8001eaa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe ffd7 	bl	8000e34 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e009      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ffd2 	bl	8000e34 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	4a91      	ldr	r2, [pc, #580]	; (80020dc <HAL_RCC_OscConfig+0x624>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e116      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	4b8d      	ldr	r3, [pc, #564]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	4b87      	ldr	r3, [pc, #540]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001eba:	4989      	ldr	r1, [pc, #548]	; (80020e0 <HAL_RCC_OscConfig+0x628>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d063      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d12a      	bne.n	8001f28 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ed2:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed6:	4b80      	ldr	r3, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	2104      	movs	r1, #4
 8001eda:	430a      	orrs	r2, r1
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ede:	4b7e      	ldr	r3, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7fe ffa3 	bl	8000e34 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ef4:	f7fe ff9e 	bl	8000e34 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0e3      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f06:	4b74      	ldr	r3, [pc, #464]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d0f1      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f10:	4b71      	ldr	r3, [pc, #452]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	22f8      	movs	r2, #248	; 0xf8
 8001f16:	4393      	bics	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	00da      	lsls	r2, r3, #3
 8001f20:	4b6d      	ldr	r3, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
 8001f26:	e034      	b.n	8001f92 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	3305      	adds	r3, #5
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f30:	4b69      	ldr	r3, [pc, #420]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f34:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f36:	2104      	movs	r1, #4
 8001f38:	438a      	bics	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	22f8      	movs	r2, #248	; 0xf8
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	00da      	lsls	r2, r3, #3
 8001f4c:	4b62      	ldr	r3, [pc, #392]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
 8001f52:	e01e      	b.n	8001f92 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f54:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f58:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f60:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f64:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f66:	2101      	movs	r1, #1
 8001f68:	438a      	bics	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7fe ff62 	bl	8000e34 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f76:	f7fe ff5d 	bl	8000e34 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0a2      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f1      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d100      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4e4>
 8001f9a:	e097      	b.n	80020cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d100      	bne.n	8001faa <HAL_RCC_OscConfig+0x4f2>
 8001fa8:	e06b      	b.n	8002082 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d14c      	bne.n	800204c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b49      	ldr	r3, [pc, #292]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001fb8:	494a      	ldr	r1, [pc, #296]	; (80020e4 <HAL_RCC_OscConfig+0x62c>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ff39 	bl	8000e34 <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff34 	bl	8000e34 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e079      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fda:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	049b      	lsls	r3, r3, #18
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	220f      	movs	r2, #15
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <HAL_RCC_OscConfig+0x630>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	431a      	orrs	r2, r3
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0449      	lsls	r1, r1, #17
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe ff07 	bl	8000e34 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe ff02 	bl	8000e34 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e047      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	049b      	lsls	r3, r3, #18
 8002046:	4013      	ands	r3, r2
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x574>
 800204a:	e03f      	b.n	80020cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002052:	4924      	ldr	r1, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x62c>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7fe feec 	bl	8000e34 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe fee7 	bl	8000e34 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e02c      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	049b      	lsls	r3, r3, #18
 800207c:	4013      	ands	r3, r2
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x5aa>
 8002080:	e024      	b.n	80020cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e01f      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x620>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d10e      	bne.n	80020c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	220f      	movs	r2, #15
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	23f0      	movs	r3, #240	; 0xf0
 80020bc:	039b      	lsls	r3, r3, #14
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b008      	add	sp, #32
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40021000 	.word	0x40021000
 80020dc:	00001388 	.word	0x00001388
 80020e0:	efffffff 	.word	0xefffffff
 80020e4:	feffffff 	.word	0xfeffffff
 80020e8:	ffc2ffff 	.word	0xffc2ffff

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b3      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d911      	bls.n	8002132 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4393      	bics	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e09a      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d015      	beq.n	8002168 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2204      	movs	r2, #4
 8002142:	4013      	ands	r3, r2
 8002144:	d006      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 800214c:	21e0      	movs	r1, #224	; 0xe0
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	22f0      	movs	r2, #240	; 0xf0
 800215a:	4393      	bics	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d040      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d114      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06e      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	049b      	lsls	r3, r3, #18
 800219a:	4013      	ands	r3, r2
 800219c:	d108      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e062      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2202      	movs	r2, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e05b      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b0:	4b30      	ldr	r3, [pc, #192]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7fe fe36 	bl	8000e34 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021cc:	e009      	b.n	80021e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ce:	f7fe fe31 	bl	8000e34 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_RCC_ClockConfig+0x18c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e042      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	220c      	movs	r2, #12
 80021e8:	401a      	ands	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1ec      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d211      	bcs.n	8002226 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	4393      	bics	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x184>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e020      	b.n	8002268 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2204      	movs	r2, #4
 800222c:	4013      	ands	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_RCC_ClockConfig+0x190>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002244:	f000 f820 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002248:	0001      	movs	r1, r0
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x188>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	220f      	movs	r2, #15
 8002252:	4013      	ands	r3, r2
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x194>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	000a      	movs	r2, r1
 800225a:	40da      	lsrs	r2, r3
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x198>)
 800225e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002260:	2003      	movs	r0, #3
 8002262:	f7fe fda1 	bl	8000da8 <HAL_InitTick>
  
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b004      	add	sp, #16
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000
 8002278:	00001388 	.word	0x00001388
 800227c:	fffff8ff 	.word	0xfffff8ff
 8002280:	08002874 	.word	0x08002874
 8002284:	2000001c 	.word	0x2000001c

08002288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	220c      	movs	r2, #12
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x30>
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x36>
 80022b6:	e02c      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ba:	613b      	str	r3, [r7, #16]
      break;
 80022bc:	e02c      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	220f      	movs	r2, #15
 80022c4:	4013      	ands	r3, r2
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0xa4>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	220f      	movs	r2, #15
 80022d2:	4013      	ands	r3, r2
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	025b      	lsls	r3, r3, #9
 80022e0:	4013      	ands	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4810      	ldr	r0, [pc, #64]	; (8002328 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022e8:	f7fd ff0e 	bl	8000108 <__udivsi3>
 80022ec:	0003      	movs	r3, r0
 80022ee:	001a      	movs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4353      	muls	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e009      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	000a      	movs	r2, r1
 80022fc:	0152      	lsls	r2, r2, #5
 80022fe:	1a52      	subs	r2, r2, r1
 8002300:	0193      	lsls	r3, r2, #6
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	185b      	adds	r3, r3, r1
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e002      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002314:	613b      	str	r3, [r7, #16]
      break;
 8002316:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002318:	693b      	ldr	r3, [r7, #16]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	08002884 	.word	0x08002884
 8002330:	08002894 	.word	0x08002894

08002334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e042      	b.n	80023cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	223d      	movs	r2, #61	; 0x3d
 800234a:	5c9b      	ldrb	r3, [r3, r2]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223c      	movs	r2, #60	; 0x3c
 8002356:	2100      	movs	r1, #0
 8002358:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f7fe fc93 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	; 0x3d
 8002366:	2102      	movs	r1, #2
 8002368:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	0019      	movs	r1, r3
 8002374:	0010      	movs	r0, r2
 8002376:	f000 f9af 	bl	80026d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2246      	movs	r2, #70	; 0x46
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	223e      	movs	r2, #62	; 0x3e
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2241      	movs	r2, #65	; 0x41
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2242      	movs	r2, #66	; 0x42
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2243      	movs	r2, #67	; 0x43
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2244      	movs	r2, #68	; 0x44
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2245      	movs	r2, #69	; 0x45
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223d      	movs	r2, #61	; 0x3d
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	223d      	movs	r2, #61	; 0x3d
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e036      	b.n	800245a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	223d      	movs	r2, #61	; 0x3d
 80023f0:	2102      	movs	r1, #2
 80023f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_TIM_Base_Start_IT+0x90>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00a      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x50>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	05db      	lsls	r3, r3, #23
 8002416:	429a      	cmp	r2, r3
 8002418:	d004      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x50>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_TIM_Base_Start_IT+0x94>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d111      	bne.n	8002448 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d010      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002446:	e007      	b.n	8002458 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40000400 	.word	0x40000400

0800246c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d124      	bne.n	80024cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d11d      	bne.n	80024cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2203      	movs	r2, #3
 8002496:	4252      	negs	r2, r2
 8002498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2203      	movs	r2, #3
 80024a8:	4013      	ands	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f8fa 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e007      	b.n	80024c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 f8ed 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f8f9 	bl	80026b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2204      	movs	r2, #4
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d125      	bne.n	8002526 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2204      	movs	r2, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d11e      	bne.n	8002526 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2205      	movs	r2, #5
 80024ee:	4252      	negs	r2, r2
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f8cd 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 800250e:	e007      	b.n	8002520 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 f8c0 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f8cc 	bl	80026b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2208      	movs	r2, #8
 800252e:	4013      	ands	r3, r2
 8002530:	2b08      	cmp	r3, #8
 8002532:	d124      	bne.n	800257e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2208      	movs	r2, #8
 800253c:	4013      	ands	r3, r2
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11d      	bne.n	800257e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2209      	movs	r2, #9
 8002548:	4252      	negs	r2, r2
 800254a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2204      	movs	r2, #4
 8002550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2203      	movs	r2, #3
 800255a:	4013      	ands	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f8a1 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 8002566:	e007      	b.n	8002578 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f894 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f8a0 	bl	80026b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2210      	movs	r2, #16
 8002586:	4013      	ands	r3, r2
 8002588:	2b10      	cmp	r3, #16
 800258a:	d125      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2210      	movs	r2, #16
 8002594:	4013      	ands	r3, r2
 8002596:	2b10      	cmp	r3, #16
 8002598:	d11e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2211      	movs	r2, #17
 80025a0:	4252      	negs	r2, r2
 80025a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2208      	movs	r2, #8
 80025a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	23c0      	movs	r3, #192	; 0xc0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d004      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f874 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e007      	b.n	80025d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 f867 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f873 	bl	80026b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10f      	bne.n	8002606 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d108      	bne.n	8002606 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2202      	movs	r2, #2
 80025fa:	4252      	negs	r2, r2
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f7fd ff03 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	4013      	ands	r3, r2
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	d10f      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	4013      	ands	r3, r2
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	d108      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2281      	movs	r2, #129	; 0x81
 8002628:	4252      	negs	r2, r2
 800262a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f8d0 	bl	80027d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	4013      	ands	r3, r2
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d10f      	bne.n	8002662 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	4013      	ands	r3, r2
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d108      	bne.n	8002662 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2241      	movs	r2, #65	; 0x41
 8002656:	4252      	negs	r2, r2
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f833 	bl	80026c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2220      	movs	r2, #32
 800266a:	4013      	ands	r3, r2
 800266c:	2b20      	cmp	r3, #32
 800266e:	d10f      	bne.n	8002690 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	4013      	ands	r3, r2
 800267a:	2b20      	cmp	r3, #32
 800267c:	d108      	bne.n	8002690 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2221      	movs	r2, #33	; 0x21
 8002684:	4252      	negs	r2, r2
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f89a 	bl	80027c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a30      	ldr	r2, [pc, #192]	; (80027ac <TIM_Base_SetConfig+0xd4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d008      	beq.n	8002702 <TIM_Base_SetConfig+0x2a>
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x2a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <TIM_Base_SetConfig+0xd8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2270      	movs	r2, #112	; 0x70
 8002706:	4393      	bics	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <TIM_Base_SetConfig+0xd4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d014      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	429a      	cmp	r2, r3
 8002724:	d00f      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <TIM_Base_SetConfig+0xd8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <TIM_Base_SetConfig+0xdc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <TIM_Base_SetConfig+0xe0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <TIM_Base_SetConfig+0xe4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d108      	bne.n	8002758 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <TIM_Base_SetConfig+0xe8>)
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	4393      	bics	r3, r2
 800275e:	001a      	movs	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <TIM_Base_SetConfig+0xd4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0xbe>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <TIM_Base_SetConfig+0xe0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0xbe>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <TIM_Base_SetConfig+0xe4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d103      	bne.n	800279e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	615a      	str	r2, [r3, #20]
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40002000 	.word	0x40002000
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800
 80027c0:	fffffcff 	.word	0xfffffcff

080027c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	2600      	movs	r6, #0
 80027e8:	4d0c      	ldr	r5, [pc, #48]	; (800281c <__libc_init_array+0x38>)
 80027ea:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <__libc_init_array+0x3c>)
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	2600      	movs	r6, #0
 80027f6:	f000 f821 	bl	800283c <_init>
 80027fa:	4d0a      	ldr	r5, [pc, #40]	; (8002824 <__libc_init_array+0x40>)
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <__libc_init_array+0x44>)
 80027fe:	1b64      	subs	r4, r4, r5
 8002800:	10a4      	asrs	r4, r4, #2
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	00b3      	lsls	r3, r6, #2
 800280a:	58eb      	ldr	r3, [r5, r3]
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	00b3      	lsls	r3, r6, #2
 8002814:	58eb      	ldr	r3, [r5, r3]
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	080028a4 	.word	0x080028a4
 8002820:	080028a4 	.word	0x080028a4
 8002824:	080028a4 	.word	0x080028a4
 8002828:	080028a8 	.word	0x080028a8

0800282c <memset>:
 800282c:	0003      	movs	r3, r0
 800282e:	1882      	adds	r2, r0, r2
 8002830:	4293      	cmp	r3, r2
 8002832:	d100      	bne.n	8002836 <memset+0xa>
 8002834:	4770      	bx	lr
 8002836:	7019      	strb	r1, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	e7f9      	b.n	8002830 <memset+0x4>

0800283c <_init>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002842:	bc08      	pop	{r3}
 8002844:	469e      	mov	lr, r3
 8002846:	4770      	bx	lr

08002848 <_fini>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr
